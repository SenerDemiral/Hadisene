@using System.Globalization
@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (tbl != null)
{
	<div style="max-height:80vh;overflow:auto;">
		<table>
			<caption>
				<button @onclick="@(() => ShowMdf(0))">
					<span class="material-symbols-outlined">add</span>Talep Modelleri
				</button>
				<button @onclick="@(() => ShowM2O())">
					<span class="material-symbols-outlined">contract</span>Talepleri oluştur
				</button>
			</caption>
			<tbody>
				<tr>
					<th>edit</th>
					<th>konu</th>
					<th>grup</th>
					<th>kime</th>
					<th>+gün</th>
					<th>plnBaş</th>
					<th>süre(s)</th>

				</tr>
				@foreach (var rec in tbl)
				{
					<tr>
						<td>
							<button @onclick="@(() => ShowMdf(rec.MOId))">
								<span class="material-symbols-outlined">edit</span>@rec.MOId
							</button>
						</td>
						<td>@rec.TskAd</td>
						<td>@rec.SrvAd</td>
						<td>@rec.ActAd</td>
						<td class="ta-c">@rec.aGun</td>
						<td class="ta-c">@rec.RST.ToString("HH:mm")</td>
						<td class="ta-c">@rec.RPH</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	private List<MO> tbl;
	[Parameter] public int MMId { get; set; }

	ModalOptions options = new ModalOptions()
		{
			HideHeader = true,
			Size = ModalSize.Large,
		};


	public async Task ShowMdf(int id)
	{
		ModalParameters mp = new();
		mp.Add("MMId", MMId);
		mp.Add("MOId", id);

		var x = Modal.Show<MdlOrdMdf>("", mp, options);
		var r = await x.Result;
		if (r.Confirmed)
		{
			await Read();
		}
	}

	public async Task ShowM2O()
	{
		ModalParameters mp = new();
		mp.Add("MMId", MMId);

		var x = Modal.Show<Mdl2Ord>("", mp, options);
		var r = await x.Result;
		if (r.Confirmed)
		{
			await Read();
		}
	}

	private async Task Read()
	{
		try
		{
			using var conn = db.GetConnection();
			tbl = (await conn.QueryAsync<MO>("MO_QRY",
				new { a = my.Id, b = MMId }, commandType: CommandType.StoredProcedure)
			).ToList();

			//Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}


	public sealed class MO
	{
		public int MOId;
		public int SrvId;
		public int TskId;
		public int ActId;
		public string? SrvAd;
		public string? TskAd;
		public string? ActAd;

		public int aGun;		//Iki Talep arasındaki gün sayısı
		public DateTime RST;		
		public int RPH;         //RequestPeriodHour
		//public TimeOnly RST;	//RequestStartTime


		public string? Rf1;
		public string? Rf2;
		public string? Inf;
	}
}

