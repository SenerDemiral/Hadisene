@using System.Globalization
@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (tbl != null)
{
	<div style="max-height:80vh;overflow:auto;">
		<table>
			<caption>
				<button @onclick="@(() => ShowMdf(0))">
					<span class="material-symbols-outlined">add</span>Talep Modelleri
				</button>
				<button @onclick="@(() => ShowM2O())">
					<span class="material-symbols-outlined">contract</span>Talepleri oluştur
				</button>
			</caption>
			<tbody>
				<tr>
					<th rowspan="2">edit</th>
					<th rowspan="2">konu</th>
					<th rowspan="2">grup</th>
					<th rowspan="2">kime</th>
					<th rowspan="2">±gün</th>
					<th colspan="2">planlanan başlangıç</th>
					<th colspan="2">bu sefer</th>
				</tr>
				<tr>
					<th>zmn</th>
					<th>süre(s)</th>
					<th>Ok</th>
					<th>±gün</th>

				</tr>
				@foreach (var rec in tbl)
				{
					<tr>
						<td>
							<button @onclick="@(() => ShowMdf(rec.MOId))">
								<span class="material-symbols-outlined">edit</span>@rec.MOId
							</button>
						</td>
						<td>@rec.TskAd</td>
						<td>@rec.SrvAd</td>
						<td>@rec.ActAd</td>
						<td class="ta-c">@rec.aGun</td>
						<td class="ta-c">@rec.RST.ToString("HH:mm")</td>
						<td class="ta-c">@rec.RPH</td>
						<td><input type="checkbox" @bind="rec.isxOK" /></td>
						<td class="ta-c">
							<input type="number" style="width:56px" @bind-value="@rec.xaGun" />
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	private List<MO> tbl;
	[Parameter] public int MMId { get; set; }

	ModalOptions options = new ModalOptions()
		{
			HideHeader = true,
			Size = ModalSize.Large,
		};


	public async Task ShowMdf(int id)
	{
		ModalParameters mp = new();
		mp.Add("MMId", MMId);
		mp.Add("MOId", id);

		var x = Modal.Show<MdlOrdMdf>("", mp);
		var r = await x.Result;
		if (r.Confirmed)
		{
			await Read();
		}
	}

	public async Task ShowM2O()
	{
		using var conn = db.GetConnection();
		foreach (var t in tbl)
		{
			conn.Execute("MO_X_UPD",
				new
				{
					p1 = t.MOId,
					p2 = t.xOK,
					p3 = t.xaGun,
				},
				commandType: CommandType.StoredProcedure);
		}

		ModalParameters mp = new();
		mp.Add("MMId", MMId);

		var x = Modal.Show<Mdl2Ord>("", mp);
		var r = await x.Result;
		if (r.Confirmed)
		{
			await Read();
		}
	}

	private async Task Read()
	{
		try
		{
			using var conn = db.GetConnection();
			tbl = (await conn.QueryAsync<MO>("MO_QRY",
				new { a = my.Id, b = MMId }, commandType: CommandType.StoredProcedure)
			).ToList();

			//Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}


	public sealed class MO
	{
		public int MOId;
		public int SrvId;
		public int TskId;
		public int ActId;
		public string? SrvAd;
		public string? TskAd;
		public string? ActAd;

		public int aGun;        //Talepler ins edilirken BasTrh den kac gün sonra bu baslayacak
		public DateTime RST;
		public int RPH;         //RequestPeriodHour

		public int xOK;			//Bu seferlik
		public bool isxOK
		{
			get => xOK == 1;
			set
			{
				xOK = value ? 1 : 0;
			}
		}
		public int xaGun;         //Bu seferlik

		public string? Rf1;
		public string? Rf2;
		public string? Inf;
	}
}

