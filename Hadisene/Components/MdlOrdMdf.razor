@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (mo != null)
{
	<table style="width:200px;font-size:.8rem">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<td>id#</td>
				<th>@Idf()</th>
			</tr>
			<tr>
				<td>konu</td>
				<td>
					<input type="text"
						   maxlength="30"
						   size="30"
						   list="TTL"
						   @bind="mo.TskAd"
						   @bind:event="onchange"
						   @bind:after="CheckTsk" />
				</td>
			</tr>
			<tr>
				<td colspan="2">açıklama</td>
			</tr>
			<tr>
				<td colspan="2">
					<InputTextArea @bind-Value="mo.Inf"
								   rows="2"
								   style="min-width:280px; resize: both;" />
				</td>
			</tr>
			<tr>
				<td>ref1</td>
				<td>
					<input type="text"
						   class="refs"
						   maxlength="20"
						   @bind="mo.Rf1"
						   @bind:event="onchange"
						   @bind:after="(() => mo.Rf1 = mo.Rf1.toASCII())" />
				</td>
			</tr>
			<tr>
				<td>ref2</td>
				<td>
					<input type="text"
						   class="refs"
						   maxlength="20"
						   @bind="mo.Rf2"
						   @bind:event="onchange"
						   @bind:after="(() => mo.Rf2 = mo.Rf2.toASCII())" />
				</td>
			</tr>
			<tr>
				<td>grup</td>
				<td>
					<input type="text"
						   maxlength="30"
						   size="30"
						   list="SSL"
						   @bind="mo.SrvAd"
						   @bind:event="onchange"
						   @bind:after="CheckSrv" />
				</td>
			</tr>
			<tr>
				<td>kime</td>
				<td>
					<input type="text"
						   maxlength="30"
						   size="30"
						   list="SAL"
						   @bind="mo.ActAd"
						   @bind:event="onchange"
						   @bind:after="CheckAct" />
				</td>
			</tr>
			<tr>
				<td colspan="2">kaç gün önce/sonra başlayacak</td>
			</tr>
			<tr>
				<td>±gün</td>
				<td>
					<input type="number" style="width:56px" @bind-value="@mo.aGun" />
				</td>
			</tr>
			<tr>
				<td colspan="2">planlanan başlangıç</td>
			</tr>
			<tr>
				<td>zaman</td>
				<td>
					<input type="time" @bind-value="@mo.RSD" />
				</td>
			</tr>
			<tr>
				<td>süre(s)</td>
				<td>
					<input type="number" style="width:56px" @bind-value="@mo.iRPH" />
				</td>
			</tr>
			@if (MOId != 0)
			{
				<tr>
					<td style="color:red">sil</td>
					<td>
						<input type="checkbox" @bind=@mo.Del disabled=@(MOId == 0) style="width:auto" />
					</td>
				</tr>
			}
		</tbody>
	</table>

	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SAL">
		@foreach (var r in sad!)
		{
			<option value="@r.Key" />
		}
	</datalist>

}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int MMId { get; set; }
	[Parameter] public int MOId { get; set; }
	private MO? mo, omo;
	private Dictionary<string, int>? ssd, ttd, sad;

	private void CheckSrv()
	{
		if (ssd!.TryGetValue(mo.SrvAd, out var nid))
		{
			mo.SrvId = nid;
			SrvActLU(nid);

			if (!String.IsNullOrEmpty(mo.ActAd) && sad!.TryGetValue(mo.ActAd, out var nid2))
			{
				mo.ActId = nid2;
			}
			else
			{
				mo.ActId = 0;
				mo.ActAd = "";
			}
			//CheckAct();
		}
		else
			mo.SrvAd = omo.SrvAd;
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(mo.TskAd, out var nid))
		{
			mo.TskId = nid;
			using var conn = db.GetConnection();
			var tt = conn.QuerySingle<TT>("TT_SEL",
						new { TTId = nid },
						commandType: CommandType.StoredProcedure);
			if (!string.IsNullOrEmpty(tt.Inf))
				mo.Inf = tt.Inf;
		}
		else
			mo.TskAd = omo.TskAd;
	}
	private void CheckAct()
	{
		if (sad!.TryGetValue(mo.ActAd, out var nid))
		{
			mo.ActId = nid;
		}
		else
			mo.ActAd = omo.ActAd;
	}

	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			_ = conn.Execute("MO_MDF",
					new
					{
						p0 = my.Id,
						p1 = mo.Del ? 1 : 0,
						p2 = MOId,
						p3 = MMId,
						p4 = mo.aGun,
						p5 = mo.RSD,
						p6 = mo.RPH,
						p7 = mo.SrvId,
						p8 = mo.TskId,
						p9 = mo.ActId,
						pa = mo.Inf,
						pb = mo.Rf1,
						pc = mo.Rf2,
					},
					commandType: CommandType.StoredProcedure);

		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}

		await ModalIns.CloseAsync(ModalResult.Ok());
	}

	protected override void OnInitialized()
	{
		using var conn = db.GetConnection();

		if (MOId == 0)
		{
			mo = new();
			omo = new();
		}
		else
		{
			try
			{
				mo = conn.QuerySingle<MO>("MO_SEL",
						new { MOId = MOId },
						commandType: CommandType.StoredProcedure);

				omo = mo.ShallowCopy();

			}
			catch (Exception ex)
			{
				var hata = ex.Message.Split("\r\n")[1];
				Modal.Show<ModalConfirm>(hata);
			}
		}
		ssd = conn.Query<SS>("SS_LU", new { UsrId = my.Id, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		ttd = conn.Query<TT>("TT_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		//Srv Actors
		sad = conn.Query<UU>("SA_LU", new { SSId = mo.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

	}
	private void SrvActLU(int SSId)
	{
		using var conn = db.GetConnection();
		sad = conn.Query<UU>("SA_LU", new { SSId = mo.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}


	private string Idf()
	{
		return MOId == 0 ? "yeni" : MOId.ToString();
	}

	public sealed class MO
	{
		public int MOId;
		public int SrvId;
		public int TskId;
		public int ActId;
		public string? SrvAd;
		public string? TskAd;
		public string? ActAd;

		public int aGun;        //kaç gün sonra başlayacak +Gun
		public DateTime RSD = DateTime.Today;    //Tarihin zmn kısmı RequestStartTime
		public int RPH;         //RequestPeriodHour

		public int iRPH
		{
			get => RPH;
			set
			{
				RPH = Math.Abs(value);
			}
		}

		public string? Inf;
		public string? Rf1;
		public string? Rf2;

		public bool Del;

		public MO ShallowCopy()
		{
			return (MO)this.MemberwiseClone();
		}
	}
	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class TT
	{
		public int Id;
		public string Ad;
		public string? Inf;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}


}
