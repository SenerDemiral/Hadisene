@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable
@inject NotifierService Notifier
@inject AppState appState
@inject IDbCon db
@inject IModalService Modal


@if (oo != null)
{

	<div class="oeCard"
		 data-Usr="A" data-Stu="Z" d
		 ata-CS="G" data-CF="G"
		 data-IoC="I" data-SoF="F">

		<div class="oeHdr">
			<button class="oeBtnCancel">Vazgeç</button>
			<div>@OOId</div>
			<button class="oeBtnSave">Kaydet</button>
		</div>

		<div class="oeHdr">
			<InputRadioGroup @bind-Value="mode">
				@foreach (var mode in Enum.GetValues<Mode>())
				{
					<div>
						<label>
							<InputRadio Value="mode" disabled="@modeRO" />
							@ModeT[(int)mode]
						</label>
					</div>
				}
			</InputRadioGroup>
		</div>

		<div class="oeBdy">

			<div class="oeBox oeReq">
				<input type="text" disabled="@oo.ReqRO" @bind-value="@oo.ReqAd" />
			</div>
			<div class="oeBox oeSbj">

				<input type="text"
					   maxlength="30"
					   size="30"
					   list="SSL"
					   disabled="@oo.SbjRO"
					   @bind="oo.SbjAd"
					   @bind:event="onchange"
					   @bind:after="CheckSbj" />
			</div>

			<div class="oeBox oeTsk">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="TTL"
					   disabled="@oo.TskRO"
					   @bind="oo.TskAd"
					   @bind:event="onchange"
					   @bind:after="CheckTsk" />
			</div>

			<div class="oeBox oeInf">
				<InputTextArea @bind-Value="oo.Inf" rows="2" disabled="@oo.InfRO" />
			</div>

			<div class="oeBox oeAct">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="UUL"
					   disabled="@oo.ActRO"
					   @bind="oo.ActAd"
					   @bind:event="onchange"
					   @bind:after="CheckAct" />
			</div>

			<div class="oeBox oeS oeRSD">
				<input type="datetime-local" disabled="@oo.RSDro" @bind-value="@oo.RSD" />
			</div>
			<div class="oeBox oeS oeASD">
				<input type="datetime-local" disabled="@oo.ASDro" @bind-value="@oo.ASD" />
			</div>

			<div class="oeBox oeF oeRFD">
				<input type="datetime-local" disabled="@oo.RFDro" @bind-value="@oo.RFD" />
			</div>
			<div class="oeBox oeF oeAFD">
				<input type="datetime-local" disabled="@oo.AFDro" @bind-value="@oo.AFD" />
			</div>
		</div>

		<div class="oeFtr">FOOTER</div>

	</div>

	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="UUL">
		@foreach (var r in uud!)
		{
			<option value="@r.Key" />
		}
	</datalist>
}


@*
			<details>
				<summary>Details</summary>
				Something small enough to escape casual notice.
			</details>

<details>
	<summary>Details</summary>
	Something small enough to escape casual notice.
</details>

<div>aaaaaaaaaaaaaaaaaaaaaaaa</div>
<div>bbbbbbbbbbbbbbbbbbbbbbbbbbbb</div>
 *@

@code {
	[Parameter]
	public int OOId { get; set; } = 0;
	private OO? oo, ooo;
	public enum Mode { Show, Edit, Clone, New };
	public string[] ModeT = ["Oku", "Edit", "Çoğalt", "Yeni"];
	private Dictionary<string, int>? ssd, ttd, uud;

	//private string mode = "E";	// Edit, Duplicate/Clone, New/Insert
	private bool modeRO;
	private Mode _mode = Mode.Show;
	public Mode mode
	{
		get => _mode;
		set
		{
			// mode bir kere değişebilir, yanlış yaptıysa çık/gir yapsın
			ModeChanging(_mode, value);
			_mode = value;
			//modeRO = !modeRO; // Deneme
		}
	}
	private void ModeChanging(Mode oldMode, Mode newMode)
	{
		// Ilk girişte rec kopyasını al
		if (newMode == Mode.New)
		{
			// Yeni rec
		}
		if (newMode == Mode.Clone)
		{
			// Yeni rec = initialRec then insert
			oo.RSD = null;
			oo.RFD = null;
			oo.ASD = null;
			oo.AFD = null;
		}
		if (newMode == Mode.Edit)
		{
			// Yeni rec = initialRec then update
			// Yetkisine göre hangi alanları değiştirebilir (DB de tanımlı aslında)
			oo.SbjRO = false;
		}
		//oo.ASD = DateTime.Today;

	}

	private void CheckSbj()
	{
		if (ssd!.TryGetValue(oo.SbjAd, out var nid))
		{
			oo.SbjId = nid;
			SbjUsrLU(nid);

			if (uud!.TryGetValue(oo.ActAd, out var nid2))
			{
				oo.ACTID = nid2;
			}
			else {
				oo.ACTID = 0;
				oo.ActAd = "";
			}
				//CheckAct();
		}
		else
			oo.SbjAd = ooo.SbjAd;
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(oo.TskAd, out var nid))
		{
			oo.TskId = nid;
		}
		else
			oo.TskAd = ooo.TskAd;
	}
	private void CheckAct()
	{
		if (uud!.TryGetValue(oo.ActAd, out var nid))
		{
			oo.ACTID = nid;
		}
		else
			oo.ActAd = ooo.ActAd;
	}

	private void FieldCheck()
	{
		// Stu=A ise Ytk(1/2) tüm alanları değiştirebilir
		// Stu=X/Z ise hiçbirşey değiştirilemez
		oo.RSDro = oo.ASD != null;
		oo.RFDro = oo.AFD != null;
	}
	private void Kaydet()
	{

	}
	private void Vazgec()
	{

	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			Read();
			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			// Modal.Show<Confirm>(hata);
		}
	}

	private void Read()
	{
		using var conn = db.GetConnection();
		//oo = conn.QuerySingle<OO>($"select * from OO_SEL({OOId})");
		oo = conn.QuerySingle<OO>("OO_SEL",
		  	 new { Id = OOId }, // SP parametreleri DB deki sırasıyla gönderilmeli
			 commandType: CommandType.StoredProcedure);

		ooo = oo.ShallowCopy();

		ssd = conn.Query<SS>("SS_LU", new { FFId = appState.UsrFrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		ttd = conn.Query<TT>("TT_LU", new { FFId = appState.UsrFrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

		uud = conn.Query<UU>("SU_LU", new { SSId = oo.SbjId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}

	private void SbjUsrLU(int SSId)
	{
		using var conn = db.GetConnection();
		uud = conn.Query<UU>("SU_LU", new { SSId = oo.SbjId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		await InvokeAsync(() =>
		{
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class TT
	{
		public int Id;
		public string Ad;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}

	public sealed class OO
	{
		public int Idx;
		public DateTime? UpdTS;

		public int UsrId;   // Last updated by

		public int OOId;
		public int ReqId;
		public int SbjId;
		public int TskId;
		public int ACTID;

		public string? Inf;

		public DateTime? RSD;
		public DateTime? ASD;
		public DateTime? RFD;
		public DateTime? AFD;

		public string? ReqAd;
		public string? SbjAd;
		public string? TskAd;
		public string? ActAd;
		public string? DENEME;

		// Color/Condition
		public string CS = "";  // Start R/B/G
		public string CF = "";  // Finish R/B/G

		// Delay Star/Finish Hour (+:Gecikme, -:Erken)
		public int DSH;
		public int DFH;

		public string Stu = "";
		public int Pin
		{
			get => Pinned ? 1 : 0;
			set
			{
				Pinned = value == 1;
			}
		}
		public bool Pinned = false;

		public int MnVc;    // Msg Not Viewed Count (New) for this Usr

		public string IoC = "I";    // Footer Input or Confirm
		public string SoF = "S";    // Footer Start or Finish

		public bool InfRO = true;
		public bool ReqRO = true;
		public bool SbjRO = false;
		public bool TskRO = false;
		public bool ActRO = false;
		public bool RSDro = false;
		public bool RFDro = false;
		public bool ASDro = false;
		public bool AFDro = false;

		public string? RSDf => RSD?.ToString("dd.MM.yy HH:mm");
		public string? RFDf => RFD?.ToString("dd.MM.yy HH:mm");
		public string? ASDf => ASD?.ToString("dd.MM.yy HH:mm");
		public string? AFDf => AFD?.ToString("dd.MM.yy HH:mm");

		public string MnVcF => MnVc > 99 ? "+99" : MnVc.ToString("#");

		public OO ShallowCopy()
		{
			return (OO)this.MemberwiseClone();
		}
	}
}
