@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing

@inject NotifierService Notifier
@inject AppState my
@inject IDbCon db
@inject IModalService Modal
@inject NavigationManager Navigation
@inject IWebHostEnvironment env
@inject IJSRuntime js
@implements IDisposable

@if (omList != null)
{
	@* <div style="container: sener / inline-size;max-width:80vw;max-height:80vh"> *@

	<div class="msg-cnt">
		<div class="msg-bdy" id="scroll-area">
			@foreach (var rec in omList)
			{
				@if (rec.PB == 1)
				{
					<div class="page-break">
						@rec.InsTS.ToString("dd.MM.yy dddd")
					</div>
				}
				<div class="msg-itm" data-loc="@rec.Loc" @key="rec.OMId">
					<div class="usr">
						<div>@rec.UUAd</div>
						<div class="zmn" prvt="@rec.Prvt">@rec.InsTS.ToLongTimeString()</div>
					</div>
					@if (rec.Typ == "I")
					{
						<button style="height:auto;" @onclick="@(() => ShowImage(rec))">
							<img src=@rec.Msg />
						</button>
					}
					else if (rec.Typ == "F")
					{
						<a href="@rec.Msg" target="_blank">dosya.@rec.Msg.Split('.').Last()</a>
					}
					else
					{
						<div class="msg">@rec.Msg</div>
					}
				</div>
			}
		</div>
		<div class="msg-inp">
			<button onclick="document.getElementById('scroll-area').scrollTop = 0">
				<span class="material-symbols-outlined">north</span>
			</button>

			<button onclick="document.getElementById('scroll-area').scrollTop = 99999">
				<span class="material-symbols-outlined">south</span>
			</button>


			<label for="photo" style="cursor:pointer; display: inline-flex; align-items: center; padding-inline: inherit;">
				<span class="material-symbols-outlined">add_a_photo</span>
				<InputFile type="file" id="photo" capture="user" accept="image/*" OnChange="Changed" hidden></InputFile>
			</label>

			<InputTextArea @bind-Value="msg" rows="2" style="flex:1" placeholder="Mesaj yazın." />

			<button @onclick="InsertTextRec">
				<span class="material-symbols-outlined" style="color: limegreen;">send</span>
			</button>
			@if (my.Ytk < 4)
			{
				<button @onclick="InsertPrivateTextRec">
					<span class="material-symbols-outlined" style="color: firebrick;">send</span>
				</button>
			}
		</div>
	</div>
}


@code {
	[Parameter]
	public int OOId { get; set; } = 0;
	[Parameter]
	public int isChn { get; set; } = 0;

	private List<OM>? omList;
	public string? msg;
	private bool disposing;
	private bool isPrivate;
	private string? ordUsrs;

	public void ShowImage(OM rec)
	{
		var options = new ModalOptions()
			{
				HideHeader = true,
				Size = ModalSize.Custom,
				SizeCustomClass = "blazored-modal-custom-size",
			};
		ModalParameters mp = new();
		mp.Add("imgSrc", rec.Msg.Substring(0, rec.Msg.IndexOf("?")));

		Modal.Show<ImageView>("", mp, options);
	}

	public async Task Changed(InputFileChangeEventArgs e)
	{
		//var fileName = $"{env.WebRootPath}\\uploads\\F101\\{e.File.Name}";
		//await using FileStream fs = new(fileName, FileMode.Create);
		//await e.File.OpenReadStream().CopyToAsync(fs);

		int OMId = 0;
		string typ = "I";
		string fullName;

		try
		{
			if (e.File.ContentType.StartsWith("image/"))
			{
				typ = "I";
				// OpenReadStream maxFileSize limitini geçerse yapmıyor
				using (var image = await Image.LoadAsync(e.File.OpenReadStream(6_000_000)))
				{
					image.Mutate(x => { if (x.GetCurrentSize().Width > 1024) x.Resize(1024, 0); }); //Resize(1024, 0));  //(256, 256));

					(OMId, fullName) = InsertImageRec(e, typ);

					image.Save(fullName);

				}
			}
			else if (!string.IsNullOrEmpty(e.File.ContentType))
			{
				// Şimdilik
				// throw new InvalidOperationException("Sadece Image");
				// await using FileStream fs = new(fileName, FileMode.Create);
				// await e.File.OpenReadStream().CopyToAsync(fs);
				typ = "F";
				(OMId, fullName) = InsertImageRec(e, typ);

				await using FileStream fs = new(fullName, FileMode.Create);
				await e.File.OpenReadStream().CopyToAsync(fs);
			}
			else
			{
				throw new InvalidOperationException("Desteklenmeyen dosya tipi");
			}

			//await Task.Delay(1000);

			await Notifier.Invoke("IM", new NotifyArgs
				{
					UUId = my.Id,
					OMId = OMId,
					OOId = OOId,
					MsgTyp = typ,
				});
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	private async Task InsertPrivateTextRec()
	{
		isPrivate = true;
		await InsertTextRec();
		isPrivate = false;
	}

	private async Task InsertTextRec()
	{
		if (string.IsNullOrEmpty(msg))
			return;

		using var conn = db.GetConnection();
		var OMId = conn.ExecuteScalar<int>("OM_INS_TXT",
			new { a = my.Id, b = OOId, c = my.FrmId, f = msg, g = isPrivate ? 1 : 0 },
			commandType: CommandType.StoredProcedure);

		await Notifier.Invoke("IM", new NotifyArgs
			{
				FFId = my.FrmId,
				UUId = my.Id,
				OOId = OOId,
				OMId = OMId,
				OrdUsrs = ordUsrs,
			});

		msg = null;
	}

	private (int, string) InsertImageRec(InputFileChangeEventArgs e, string typ)
	{
		var fileName = Guid.NewGuid().ToString("N") + Path.GetExtension(e.File.Name);

		using var conn = db.GetConnection();
		var OMId = conn.ExecuteScalar<int>("OM_INS_IMG",
			new { a = my.Id, b = OOId, c = my.FrmId, d = typ, f = fileName }, commandType: CommandType.StoredProcedure);

		var dirName = $@"{env.WebRootPath}\uploads\F{my.FrmId}";
		Directory.CreateDirectory(dirName); // if not exists
		
		var fullName = $@"{dirName}\{typ}{OMId}-{fileName}";

		return (OMId, fullName);
	}

	private async Task Read()
	{
		using var conn = db.GetConnection();
		try
		{
			omList = (await conn.QueryAsync<OM>("OM_QRY",
				new { a = my.Id, b = OOId, c = isChn }, commandType: CommandType.StoredProcedure)
			).ToList();

			omList = omList.OrderBy(x => x.InsTS).ToList();

			ordUsrs = conn.ExecuteScalar<string>("OO_USRS",
				new { p1 = OOId }, commandType: CommandType.StoredProcedure);

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "IM" && value.OOId == OOId)
		{
			using var conn = db.GetConnection();
			var x = conn.QuerySingleOrDefault<OM>("OM_SEL",
				new { a = my.Id, b = value.OMId, c = isChn }, commandType: CommandType.StoredProcedure);

			if (x != null)
			{
				omList!.Add(x);

				await InvokeAsync(() =>
				{
					StateHasChanged();
				});

				await Task.Delay(value.MsgTyp == "I" ? 1000 : 100);
				try
				{
					await js.InvokeVoidAsync("scrollBottom", "scroll-area");
					await js.InvokeVoidAsync("playSound", "sound");
				}
				catch (JSDisconnectedException) { }
			}
		}
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class OM
	{
		public int PB;  // PageBreak
		public int OMId;
		public int UUId;
		public string? UUAd;
		public DateTime InsTS;
		public string Typ;
		public string Msg;
		public int Prvt;
		public string Loc;  // Left/Right
	}
}
