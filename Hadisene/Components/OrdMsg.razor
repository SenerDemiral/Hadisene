@page "/ordmsg"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NotifierService Notifier
@inject AppState AppState
@inject IDbCon db
@inject IModalService Modal
@inject NavigationManager Navigation
@inject IWebHostEnvironment env
@inject IJSRuntime js
@implements IDisposable

@if (omList != null)
{
	@* <div style="container: sener / inline-size;max-width:80vw;max-height:80vh"> *@

	<div class="msg-cnt">
		<div class="msg-bdy" id="myDIV">
			@foreach (var rec in omList)
			{
				@if (rec.PB == 1)
				{
					<div class="page-break">
						@rec.InsTS.ToString("dd.MM.yy dddd")
					</div>
				}
				<div class="msg-itm" data-loc="@rec.Loc" @key="rec.OMId">
					<div class="usr">
						<div>@rec.UUAd</div>
						<div>@rec.InsTS.ToLongTimeString()</div>
					</div>
					@if (rec.Typ == "I")
					{
						<button @onclick="@(() => ShowImage(rec))">
							<img src=@rec.Msg />
						</button>
					}
					else
					{
						<div class="msg">@rec.Msg</div>
					}
				</div>
			}
		</div>
		<div class="msg-inp">
			<button onclick="document.getElementById('myDIV').scrollTop = 0">
				<span class="material-symbols-outlined">
					north
				</span>
			</button>

			<button onclick="document.getElementById('myDIV').scrollTop = 99999">
				<span class="material-symbols-outlined">
					south
				</span>
			</button>

			<InputTextArea @bind-Value="msg" rows="2" placeholder="Mesaj yazın." />

			<label for="photo" style="cursor:pointer; margin: auto 12px;">
				<span class="material-symbols-outlined">
					add_a_photo
				</span>
				<InputFile type="file" id="photo" capture="user" accept="image/*" OnChange="Changed" hidden></InputFile>
			</label>

			<button @onclick="InsertTextRec">
				<span class="material-symbols-outlined">
					keyboard_return
				</span>OK
			</button>
		</div>
	</div>
}


@code {
	[Parameter]
	public int OOId { get; set; } = 0;

	private List<OM>? omList;
	public string? msg;
	private bool disposing;

	public void ShowImage(OM rec)
	{
		var options = new ModalOptions()
			{
				HideHeader = true,
				Size = ModalSize.Custom,
				SizeCustomClass = "blazored-modal-custom-size",
				Position = ModalPosition.Middle
			};
		ModalParameters mp = new();
		mp.Add("imgSrc", rec.Msg.Substring(0, rec.Msg.IndexOf("?")));

		Modal.Show<ImageView>("", mp, options);
	}

	public async Task Changed(InputFileChangeEventArgs e)
	{
		//var fileName = $"{env.WebRootPath}\\uploads\\F101\\{e.File.Name}";
		//await using FileStream fs = new(fileName, FileMode.Create);
		//await e.File.OpenReadStream().CopyToAsync(fs);
		try
		{
			if (e.File.ContentType.StartsWith("image/"))
			{
				// OpenReadStream maxFileSize limitini geçerse yapmıyor
				using (var image = await Image.LoadAsync(e.File.OpenReadStream(6_000_000)))
				{
					image.Mutate(x => { if (x.GetCurrentSize().Width > 1024) x.Resize(1024, 0); }); //Resize(1024, 0));  //(256, 256));
					var OMId = InsertImageRec(e);
					var fileName = $"{env.WebRootPath}\\uploads\\F101\\M{OMId}{Path.GetExtension(e.File.Name)}";

					image.Save(fileName);

					//await Task.Delay(1000);

					await Notifier.Invoke("IM", new NotifyArgs
						{
							OMId = OMId,
							OOId = OOId,
							MsgTyp = "I",
						});

				}
			}
			else
			{
				// Şimdilik
				throw new InvalidOperationException("Sadece Image");
				// await using FileStream fs = new(fileName, FileMode.Create);
				// await e.File.OpenReadStream().CopyToAsync(fs);
			}

		}
		catch (Exception ex)
		{
			var hata = ex.Message;
			Modal.Show<ModalConfirm>(hata);
		}
	}

	private async Task InsertTextRec()
	{
		if (string.IsNullOrEmpty(msg))
			return;

		using var conn = db.GetConnection();
		var x = conn.QuerySingle("OM_INS_TXT",
			new { a = AppState.UsrId, b = OOId, c = AppState.UsrFrmId, f = msg },
			commandType: CommandType.StoredProcedure);

		int OMId = x.OMID;

		await Notifier.Invoke("IM", new NotifyArgs
			{
				UsrId = AppState.UsrId,
				OOId = OOId,
				OMId = OMId,
			});

		msg = null;
	}

	private int InsertImageRec(InputFileChangeEventArgs e)
	{
		var fileExt = Path.GetExtension(e.File.Name);

		using var conn = db.GetConnection();
		var x = conn.QuerySingle("OM_INS_IMG",
			new { a = AppState.UsrId, b = OOId, c = AppState.UsrFrmId, d = "I", f = fileExt },
			commandType: CommandType.StoredProcedure);

		int OMId = x.OMID;
		return OMId;
	}

	private async Task Read()
	{
		using var conn = db.GetConnection();
		try
		{
			omList = (await conn.QueryAsync<OM>("OM_QRY",
				new { a = AppState.UsrId, b = OOId }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.StoredProcedure)
			).ToList();

			omList = omList.OrderBy(x => x.InsTS).ToList();

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "IM" && value.OOId == OOId)
		{
			using var conn = db.GetConnection();
			var x = conn.QuerySingle<OM>("OM_SEL", new { a = AppState.UsrId, b = value.OMId }, commandType: CommandType.StoredProcedure);
			omList!.Add(x);

			await InvokeAsync(() =>
			{
				StateHasChanged();
			});

			await Task.Delay(value.MsgTyp == "I" ? 1000 : 100);
			try
			{
				await js.InvokeVoidAsync("scrollBottom", "myDIV");
			}
			catch (JSDisconnectedException) { }
		}
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class OM
	{
		public int PB;  // PageBreak
		public int OMId;
		public int UUId;
		public string? UUAd;
		public DateTime InsTS;
		public string Typ;
		public string Msg;
		public string Loc;  // Left/Right
	}
}
