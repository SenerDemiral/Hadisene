@page "/ordmsg"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable
@inject NotifierService Notifier
@inject AppState AppState
@inject IDbCon db
@inject IModalService Modal
@inject NavigationManager Navigation
@inject IWebHostEnvironment env


@if (omList != null)
{
	<div style="container: sener / inline-size;">

		<div class="msg-cnt">
			<div class="msg-bdy" id="myDIV">
				@foreach (var rec in omList)
				{
					@if (rec.PB == 1)
					{
						<div class="page-break">
							@rec.InsTS.ToString("dd.MM.yy dddd")
						</div>
					}
					<div class="msg-itm" data-loc="@rec.Loc" @key="rec.OMId">
						<div class="usr">
							<div>@rec.UUAd</div>
							<div>@rec.InsTS.ToShortTimeString()</div>
						</div>
						@if (rec.Typ == "I") {
							<button @onclick="@(() => ShowImage(rec.OMId))">
							<img src=@($"uploads/F101/M{rec.OMId}.jpg?width=150") />
							</button>
						@* < img src = "@($"{ env.WebRootPath}/ uploads / F101 / wallpaper.jpg ? width = 200")" /> *@
						}
						else {
							<div class="msg">@rec.Msg</div>
						}
					</div>
				}
			</div>
			<div class="msg-inp">
				<button onclick="document.getElementById('myDIV').scrollTop = 0">
					<span class="material-symbols-outlined">
						north
					</span>
				</button>

				<button onclick="document.getElementById('myDIV').scrollTop = 99999">
					<span class="material-symbols-outlined">
						south
					</span>
				</button>

				<textarea placeholder="Mesaj yazın." rows="2"></textarea>

				<label for="photo" style="cursor:pointer; margin: auto 12px;">
					<span class="material-symbols-outlined">
						add_a_photo
					</span>
					<InputFile type="file" id="photo" capture="user" accept="image/*" OnChange="Changed" hidden></InputFile>
				</label>

				<button>
					<span class="material-symbols-outlined">
						keyboard_return
					</span>OK
				</button>
			</div>
		</div>
	</div>
}


@code {
	private List<OM>? omList;
	public int OOId = 17;

	public void ShowImage(int omId)
	{
		var options = new ModalOptions()
			{
				Size = ModalSize.Automatic,
				Position = ModalPosition.Middle
			};
		ModalParameters mp = new();
		mp.Add("imgSrc", $"uploads/F101/M{omId}.jpg");
		Modal.Show<Confirm>("image", mp, options);
	}
	public async Task Changed(InputFileChangeEventArgs e)
	{

		var fileName = $"{env.WebRootPath}\\uploads\\F101\\{e.File.Name}";
		//await using FileStream fs = new(fileName, FileMode.Create);
		//await e.File.OpenReadStream().CopyToAsync(fs);
		try
		{
			if (e.File.ContentType.StartsWith("image/"))
			{
				// OpenReadStream maxFileSize limitini geçerse yapmıyor
				using (var image = await Image.LoadAsync(e.File.OpenReadStream(6_000_000)))
				{
					image.Mutate(x => { if (x.GetCurrentSize().Width > 1024) x.Resize(1024, 0); }); //Resize(1024, 0));  //(256, 256));
					fileName = await InsertImageRec(e);
					image.Save(fileName);
				}
			}
			else
			{
				// Şimdilik
				throw new InvalidOperationException("Sadece Image");
				// await using FileStream fs = new(fileName, FileMode.Create);
				// await e.File.OpenReadStream().CopyToAsync(fs);
			}

		}
		catch (Exception ex)
		{
			var hata = ex.Message;
			Modal.Show<Confirm>(hata);
		}
	}

	private async Task<string> InsertImageRec(InputFileChangeEventArgs e)
	{
		using var conn = db.GetConnection();
		var x = conn.QuerySingle("OM_INS_IMG", 
			new { a = AppState.UsrId, b = OOId, c = AppState.UsrFrmId, d = "I", f = e.File.ContentType }, 
			commandType: CommandType.StoredProcedure);

		int OMId = x.OMID;
		NotifyArgs notifyArgs = new()
			{
				OMId = OMId,
			};
		await Notifier.Invoke("IM", notifyArgs);
		return $"{env.WebRootPath}\\uploads\\F101\\M{x.OMID}{Path.GetExtension(e.File.Name)}";
	}

	private async Task Read()
	{
		using var conn = db.GetConnection();
		try
		{
			// var z = await conn.QueryAsync<OO>("OO_QRY",
			//     new { A = 31, B = qryStr }, // SP parametreleri DB deki sırasıyla gönderilmeli
			//     commandType: CommandType.StoredProcedure);

			omList = (await conn.QueryAsync<OM>("OM_QRY",
				new { a = 31, b = 17 }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.StoredProcedure)
			).ToList();

			omList = omList.OrderBy(x => x.InsTS).ToList();

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<Confirm>(hata);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "IM")
		{
			using var conn = db.GetConnection();
			var x = conn.QuerySingle<OM>($"select * from OM where OMId = {value.OMId}");
			x.Loc = "R";	// Kendisi
			omList!.Add(x);
		}
		await InvokeAsync(() =>
		{
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	private sealed class OM
	{
		public int PB;  // PageBreak
		public int OMId;
		public int UUId;
		public string UUAd;
		public DateTime InsTS;
		public string Typ;
		public string Msg;
		public string Loc;  // Left/Right
	}
}
