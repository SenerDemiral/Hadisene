@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@inject AppState my
@inject IDbCon db
@* @inject IModalService Modal *@
@page "/OrdStatSrv/{myTkn}/{myId:int}/{myYtk:int}"

@* @if (my.Ytk > 3)
{
	<h1>
		<span class="material-symbols-outlined" style="font-size:4em;color:olive;">receipt_long</span>
	</h1>
}
else
 *@


@if (os?.Count > 0 && myId > 0)
{
	<div class="osCnt">
		<table style="table-layout:fixed;width:auto;margin-inline:auto">
		@* <table style="width:auto;margin-inline:auto"> *@
			<thead class="ta-c">
				<tr>
					<th rowspan="2">Durum Özeti</th>
					<th colspan="3"><span class="material-symbols-outlined">play_circle</span></th>
					<th></th>
					<th colspan="3"><span class="material-symbols-outlined">stop_circle</span></th>
				</tr>
				<tr>
					<th class="osR">
						<span class="material-symbols-outlined">notifications_active</span>
					</th>
					<th class="osB">
						<span class="material-symbols-outlined">hourglass_top</span>
					</th>
					<th class="osG">
						<span class="material-symbols-outlined">task_alt</span>
					</th>
					<th class="osT"><span class="material-symbols-outlined">functions</span></th>
					<th class="osR">
						<span class="material-symbols-outlined">notifications_active</span>
					</th>
					<th class="osB">
						<span class="material-symbols-outlined">hourglass_top</span>
					</th>
					<th class="osG">
						<span class="material-symbols-outlined">task_alt</span>
					</th>
				</tr>
			</thead>
			<tbody>
				@if (myYtk < 4)
				{
					<tr>
						<th class="ta-l">Servis</th>
						<th colspan="7" class="ta-c" style="background-color: cornsilk;">Takip</th>
					</tr>
					@foreach (var r in os.FindAll(x => x.Grp == "-"))
					{
						<tr>
							<td>@r.Srv</td>
							<td class="ta-c osR">@r.SR.ToS()</td>
							<td class="ta-c osB">@r.SB.ToS()</td>
							<td class="ta-c osG">@r.SG.ToS()</td>
							<td class="ta-c osT">@r.Top.ToS()</td>
							<td class="ta-c osR">@r.FR.ToS()</td>
							<td class="ta-c osB">@r.FB.ToS()</td>
							<td class="ta-c osR">@r.FG.ToS()</td>
						</tr>
					}
					<tr>
						<td></td>
					</tr>
				}

				<tr>
					<th class="ta-l"></th>
					<th colspan="7" class="ta-c" style="background-color: azure;">Görevlerim</th>
				</tr>
				@foreach (var r in os.FindAll(x => x.Grp == "A"))
				{
					<tr>
						<td>@r.Tsk</td>
						<td class="ta-c osR">@r.SR.ToS()</td>
						<td class="ta-c osB">@r.SB.ToS()</td>
						<td class="ta-c osG">@r.SG.ToS()</td>
						<td class="ta-c osT">@r.Top.ToS()</td>
						<td class="ta-c osR">@r.FR.ToS()</td>
						<td class="ta-c osB">@r.FB.ToS()</td>
						<td class="ta-c osR">@r.FG.ToS()</td>
					</tr>
				}
				<tr>
					<td></td>
				</tr>

				@if (myYtk == 4)
				{
					<tr>
						<th class="ta-l"></th>
						<th colspan="7" class="ta-c" style="background-color: azure;">Açık Görevler</th>
					</tr>
					@foreach (var r in os.FindAll(x => x.Grp == "B"))
					{
						<tr>
							<td>@r.Tsk</td>
							<td class="ta-c osR">@r.SR.ToS()</td>
							<td class="ta-c osB">@r.SB.ToS()</td>
							<td class="ta-c osG">@r.SG.ToS()</td>
							<td class="ta-c osT">@r.Top.ToS()</td>
							<td class="ta-c osR">@r.FR.ToS()</td>
							<td class="ta-c osB">@r.FB.ToS()</td>
							<td class="ta-c osR">@r.FG.ToS()</td>
						</tr>
					}
					<tr>
						<td></td>
					</tr>
				}
				<tr>
					<th class="ta-l"></th>
					<th colspan="7" class="ta-c" style="background-color: seashell;">İstediklerim</th>
				</tr>
				@foreach (var r in os.FindAll(x => x.Grp == "R"))
				{
					<tr>
						<td>@r.Tsk</td>
						<td class="ta-c osR">@r.SR.ToS()</td>
						<td class="ta-c osB">@r.SB.ToS()</td>
						<td class="ta-c osG">@r.SG.ToS()</td>
						<td class="ta-c osT">@r.Top.ToS()</td>
						<td class="ta-c osR">@r.FR.ToS()</td>
						<td class="ta-c osB">@r.FB.ToS()</td>
						<td class="ta-c osR">@r.FG.ToS()</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	[CascadingParameter] public HttpContext? context { get; set; }

	[Parameter]
	public string? myTkn { get; set; }
	[Parameter]
	public int myId { get; set; }
	[Parameter]
	public int myYtk { get; set; }

	private List<OS> os;
	private string typ = "S";

	protected override async Task OnInitializedAsync()
	{
		if (context?.Request.Cookies["hadisene"] == myTkn)
		{
			try
			{
				using var conn = db.GetConnection();
				os = (await conn.QueryAsync<OS>("OO_STAT_SRV",
					new { a = myId, b = typ },
					commandType: CommandType.StoredProcedure)
				).ToList();
			}
			catch (Exception ex)
			{
				// ModalParameters mp = new();
				// mp.Add("Message", ex.Message);
				// Modal.Show<ModalWarning>("", mp);
			}
		}
	}

	public sealed class OS
	{
		public string? Grp;

		public string? Srv;
		public string? Act;
		public string? Tsk;
		public string? Req;

		public int Top;
		public int SR;
		public int SB;
		public int SG;
		public int FR;
		public int FB;
		public int FG;
	}
}
