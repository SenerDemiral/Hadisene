@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (pp != null)
{
	<table style="width:200px;">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<th>Id#</th>
				<th>Ad</th>
			</tr>
			<tr>
				<td>@Idf()</td>
				<td><input type="text" @bind="pp!.Ad" /></td>
			</tr>
			<tr>
				<td>Aylık</td>
				<td><input type="checkbox" @bind="pp!.isAYLIK" /></td>
			</tr>
			@if (pp.PPId != 0)
			{
				<tr>
					<td>Silinecek</td>
					<td>
						<input type="checkbox" @bind=@pp.Del style="width:auto" />
					</td>
				</tr>
			}

		</tbody>
	</table>
}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int Id { get; set; }
	private PP? pp;

	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			_ = conn.Execute("PP_MDF",
					new
					{
						p1 = my.Id,
						p0 = pp.Del ? 1 : 0,
						p2 = my.FrmId,
						p3 = Id,
						p4 = pp!.Ad,
						p5 = pp.AYLIK,
					},
					commandType: CommandType.StoredProcedure);

		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalWarning>(hata);
		}

		await ModalIns.CloseAsync(ModalResult.Ok());
	}

	protected override void OnInitialized()
	{
		//Modal.Show<ModalConfirm>("deneme");
		if (Id == 0)
		{
			pp = new();
			return;
		}
		try
		{
			using var conn = db.GetConnection();
			pp = conn.QuerySingle<PP>("select * from PP where PPId = @Id",
					new { Id = Id },
					commandType: CommandType.StoredProcedure);
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}


	private string Idf()
	{
		return Id == 0 ? "yeni" : Id.ToString();
	}

	public sealed class PP
	{
		public int PPId;
		public string? Ad;
		public int AYLIK
		{
			get => isAYLIK ? 1 : 0;
			set
			{
				isAYLIK = value == 1;
			}
		}
		public bool isAYLIK = false;
		public bool Del;

	}
}
