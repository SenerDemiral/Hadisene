@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (tbl != null)
{
	<table>
		<caption>
			<button @onclick="@(() => ShowMdf(0))">
				<span class="material-symbols-outlined">add</span>Kullanıcı Tanım
			</button>
		</caption>
		<tbody>
			<tr>
				<th rowspan="2">edit</th>
				<th rowspan="2">isim</th>
				<th rowspan="2">ytk</th>
				<th rowspan="2">tel</th>
				<th rowspan="2">mail</th>
				<th colspan="3" class="ta-c">izinler</th>
			</tr>
			<tr>
				@* <td colspan="5"></td> *@
				<th>Grp</th>
				<th>Prydk</th>
				<th>Mdl</th>
			</tr>
			@foreach (var rec in tbl)
			{
				<tr>
					<td>
						<button @onclick="@(() => ShowMdf(rec.UUId))">
							<span class="material-symbols-outlined">edit</span>
							<span style="font-size:.6rem;">@rec.UUId</span>
						</button>
					</td>
					<td>@rec.Ad</td>
					<td style="text-align:center;font-family: monospace;">@rec.YtkTxt</td>
					<td>@rec.Tel</td>
					<td>@rec.Mail</td>
					<td class="ta-c">
						<input type="checkbox" checked=@rec.isFPS onclick="return false" style="width:auto" />
					</td>
					<td class="ta-c">
						<input type="checkbox" checked=@rec.isFPP onclick="return false" style="width:auto" />
					</td>
					<td class="ta-c">
						<input type="checkbox" checked=@rec.isFPM onclick="return false" style="width:auto" />
					</td>

				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<UU> tbl;

	ModalOptions mdlOpts = new ModalOptions()
		{
			HideHeader = true,
			Size = ModalSize.Large,
			ActivateFocusTrap = false,
		};

	public async Task ShowMdf(int id)
	{
		ModalParameters mp = new();
		mp.Add("UUId", id);

		var x = Modal.Show<UsrMdf>("", mp, mdlOpts);
		var r = await x.Result;
		if (r.Confirmed)
		{
			await Read();
		}
	}

	private async Task Read()
	{
		try
		{
			using var conn = db.GetConnection();
			tbl = (await conn.QueryAsync<UU>("UU_QRY",
				new { a = my.Id, b = my.FrmId }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.StoredProcedure)
			).ToList();

			//Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}

	public sealed class UU
	{
		public int UUId;
		public int Ytk;
		public string? Ad;
		public string? Tel;
		public string? Mail;
		public string? Pwd;
		public string? YtkTxt;

		public int FPS;
		public bool isFPS => FPS == 1 ? true : false;
		public int FPP;
		public bool isFPP => FPP == 1 ? true : false;
		public int FPM;
		public bool isFPM => FPM == 1 ? true : false;

	}
}
