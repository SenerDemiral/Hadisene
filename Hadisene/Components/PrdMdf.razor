@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (pp != null && sad != null)
{
	<table style="min-width:340px;">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Periyodik Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<td>id#</td>
				<td>@Idf()</td>
			</tr>
			<tr>
				<td>ad</td>
				<td><input type="text" maxlength="30" @bind="pp!.Ad" /></td>
			</tr>
			<tr>
				<td>pasif</td>
				<td><input type="checkbox" @bind="pp.isPsf" style="width:auto" /></td>
			</tr>
			<tr>
				<td>sil</td>
				<td><input type="checkbox" @bind="pp.isDel" style="width:auto" /></td>
			</tr>
			<tr>
				<td>period</td>
				<td>
					<select @bind="pp.Prd" style="width:100%;">
						<option value="1">Yıllık</option>
						<option value="2">Aylık</option>
						<option value="3">Haftalık</option>
						<option value="4">Günlük</option>
						<option value="5">TekSeferlik</option>
						}
					</select>
				</td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">sonraki planlanan başlangıç</td>
			</tr>
			<tr>
				<td>tarih</td>
				<td>
					<div class="trh">
						<div class="date">
							<input type="date"
								   @bind:event="onchange"
								   @bind:get="@pp.RSD"
								   @bind:set="CheckRSD" />
						</div>
						<div class="time">
							<input type="time"
								   @bind:event="onchange"
								   @bind:get="@pp.RSD"
								   @bind:set="CheckRSD" />
						</div>
					</div>
				</td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">planlanan süre</td>
			</tr>
			<tr>
				<td>saat</td>
				<td><input type="number" min="1" @bind="pp.RPH" /></td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">planlanandan ne kadar önce Talep eklensin</td>
			</tr>
			<tr>
				<td>saat</td>
				<td><input type="number" min="1" @bind="pp.ISH" /></td>
			</tr>
			<tr>
				<td>sayaç</td>
				<td><input type="number" min="0" @bind="pp.Cntr" /></td>
			</tr>

			<tr>
				<td>isteyen</td> 
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="UUL"
							   disabled="@isReqDisabled"
							   @bind="pp.ReqAd"
							   @bind:event="onchange"
							   @bind:after="CheckReq" />
					</div>
				</td>
			</tr>
			<tr>
				<td>grup</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="SSL"
							   @bind="pp.SrvAd"
							   @bind:event="onchange"
							   @bind:after="CheckSrv" />
					</div>
				</td>
			</tr>
			<tr>
				<td>konu</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="TTL"
							   @bind="pp.TskAd"
							   @bind:event="onchange"
							   @bind:after="CheckTsk" />
					</div>
				</td>
			</tr>
			<tr>
				<td>grup üye</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="SAL"
							   @bind="pp.ActAd"
							   @bind:event="onchange"
							   @bind:after="CheckAct" />
					</div>
				</td>
			</tr>
			<tr>
				<td colspan="2" class="lbl-top">açıklama</td>
			</tr>
			<tr>
				<td colspan="2">
					<InputTextArea @bind-Value="pp.Inf"
								   rows="2"
								   style="min-width:100%; resize: both;" />
				</td>
			</tr>

		</tbody>
	</table>

	<datalist id="UUL">
		@foreach (var r in uud!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SAL">
		@foreach (var r in sad!)
		{
			<option value="@r.Key" />
		}
	</datalist>

}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int PPId { get; set; }
	private PP? pp = default, opp = default;
	private Dictionary<string, int>? uud, ttd, ssd, sad;
	private bool isReqDisabled = true;

	private void CheckReq()
	{
		if (uud!.TryGetValue(pp.ReqAd, out var nid))
		{
			pp.ReqId = nid;
			SrvLU(nid);
		}
		else
			pp.ReqAd = opp.ReqAd;
	}
	private void CheckSrv()
	{
		if (ssd!.TryGetValue(pp.SrvAd, out var nid))
		{
			pp.SrvId = nid;
			SrvActLU(nid);
			SrvTskLU(nid);

			if (!String.IsNullOrEmpty(pp.ActAd) && sad!.TryGetValue(pp.ActAd, out var nid2))
			{
				pp.ActId = nid2;
			}
			else
			{
				pp.ActId = 0;
				pp.ActAd = "";
			}
			//CheckAct();
		}
		else
			pp.SrvAd = opp.SrvAd;
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(pp.TskAd, out var nid))
		{
			pp.TskId = nid;
			using var conn = db.GetConnection();
			// QuerySingleOrDefault : db.exit ise null, QuerySingle : exception geliyor
			var tt = conn.QuerySingleOrDefault<TT>("TT_SEL",
						new { TTId = nid },
						commandType: CommandType.StoredProcedure);
			if (tt != null && !string.IsNullOrEmpty(tt.Inf))
				pp.Inf = tt.Inf;
		}
		else
			pp.TskAd = opp.TskAd;
	}
	private void CheckAct()
	{
		if (sad!.TryGetValue(pp.ActAd, out var nid))
		{
			pp.ActId = nid;
		}
		else
			pp.ActAd = opp.ActAd;
	}

	private void CheckRSD(DateTime? val)
	{
		DateTime min = DateTime.Now.AddHours(1);

		// Time part
		if (val.HasValue && pp!.RSD.HasValue && val.Value.TimeOfDay != TimeSpan.Zero)
			val = pp.RSD!.Value.Date.Add(val.Value.TimeOfDay);

		if (val == null || val < min)
			pp!.RSD = min;
		else
			pp!.RSD = val;
	}

	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			_ = conn.Execute("PP_MDF",
					new
					{
						p1 = my.Id,
						p2 = my.FrmId,
						p3 = PPId,
						p4 = pp.Psf,
						p5 = pp.Prd,
						p6 = pp!.Ad,
						p7 = pp.ISH,
						p8 = pp.RSD,
						p9 = pp.RPH,
						pa = pp.Cntr,
						pb = pp.ReqId,
						pc = pp.SrvId,
						pd = pp.TskId,
						pe = pp.ActId,
						pf = pp.Inf,
						pg = pp.Del,
					},
					commandType: CommandType.StoredProcedure);

			await ModalIns.CloseAsync(ModalResult.Ok());
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	protected override void OnInitialized()
	{
		using var conn = db.GetConnection();

		try
		{
			ssd = conn.Query<SS>("SS_LU", new { UsrId = my.Id, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
			uud = conn.Query<UU>("UU_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
			if (PPId == 0)
			{
				pp = new();
				ttd = new();
				sad = new();
			}
			else
			{
				pp = conn.QuerySingle<PP>("PP_SEL",
						new { UsrId = my.Id, PPId = PPId },
						commandType: CommandType.StoredProcedure);

				SrvTskLU(pp.SrvId);
				SrvActLU(pp.SrvId);
			}
			opp = pp.ShallowCopy();

			if (my.Ytk.IsAny(1, 2))     // Admn/Oprtr isteyeni değiştirebilir
				isReqDisabled = false;
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	private void SrvLU(int ReqId)
	{
		using var conn = db.GetConnection();
		ssd = conn.Query<SS>("SS_LU", new { Usr = ReqId, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

	}

	private void SrvTskLU(int SSId)
	{
		using var conn = db.GetConnection();
		ttd = conn.Query<TT>("ST_LU", new { UsrId = my.Id, SSId = pp.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}

	private void SrvActLU(int SSId)
	{
		if (SSId > 0)
		{
			using var conn = db.GetConnection();
			sad = conn.Query<UU>("SA_LU", new { SSId = pp.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		}
		else
			sad = new();
	}

	private string Idf()
	{
		return PPId == 0 ? "yeni" : PPId.ToString("### ### ###");
	}

	public sealed class PP
	{
		public int PPId;
		public string? Ad;
		public int Psf;
		public bool isPsf
		{
			get => Psf == 1;
			set
			{
				Psf = value ? 1 : 0;
			}
		}
		public int UUId;
		public int Prd = 1; // Yıllık
		public int ReqId;
		public string? ReqAd;
		public int SrvId;
		public string? SrvAd;
		public int TskId;
		public string? TskAd;
		public int ActId;
		public string? ActAd;
		public int ISH = 1;     // RSDden Kaç saat önce Talep yaratılacak
		public int RPH = 1;     // Planlanan süre
		public DateTime? RSD = DateTime.Now.AddHours(1);
		public string? Inf;
		public int Cntr;		// Counter

		public int Del;
		public bool isDel
		{
			get => Del == 1;
			set
			{
				Del = value ? 1 : 0;
			}
		}

		public PP ShallowCopy()
		{
			return (PP)this.MemberwiseClone();
		}
	}

	public sealed class TT
	{
		public int Id;
		public string Ad;
		public string? Inf;
	}
	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}

}
