@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (tt != null)
{
	<table style="min-width:340px;">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Konu Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<td>id#</td>
				<td>@Idf()</td>
			</tr>
			<tr>
				<td>ad</td>
				<td><input type="text" maxlength="30" @bind="tt!.Ad" /></td>
			</tr>
			<tr>
				<td colspan="2" class="lbl-top">açıklama</td>
			</tr>
			<tr>
				<td colspan="2">
					<InputTextArea @bind-Value="tt.Inf"
								   rows="2"
								   style="min-width:100%; resize: both;" />
				</td>
			</tr>
			<tr>
				<td>pasif</td>
				<td><input type="checkbox" @bind="tt.isPsf" style="width:auto" /></td>
			</tr>

			<tr>
				<td colspan="2" style="padding:0;">
					<div style="max-height:8lh;overflow:auto">
						<table>
							<tr style="font-size:.6rem;position:sticky;top:0;background-color:aliceblue;">
								<th><input type="checkbox" @bind="MergeAllSrv" style="width:auto" /></th>
								<th>grup</th>
								<th>herkes</th>
								<th style="padding:2px 0">üye</th>
								<th style="padding:2px 0">sorumlu</th>
							</tr>
							@foreach (var r in ts)
							{
								<tr>
									<td class="ta-c"><input type="checkbox" @bind="r.isMbr" /></td>
									<td>@r.SSAd</td>
									<InputRadioGroup @bind-Value="r.TlpKrl" Name="@r.SSId.ToString()">
										<td class="ta-c"><InputRadio Value="0" disabled="@(!r.isMbr)" /></td>
										<td class="ta-c"><InputRadio Value="1" disabled="@(!r.isMbr)" /></td>
										<td class="ta-c"><InputRadio Value="2" disabled="@(!r.isMbr)" /></td>
									</InputRadioGroup>
								</tr>
							}
						</table>
					</div>
				</td>
			</tr>


		</tbody>
	</table>
}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int TTId { get; set; }
	private TT? tt;
	private List<TS>? ts;	// TaskServices
	private bool _MergeAllSrv;
	private bool MergeAllSrv
	{
		get => _MergeAllSrv;
		set
		{
			foreach (var r in ts)
			{
				if (r.STId == 0)
					r.Mbr = value ? 1 : 0;
			}
			_MergeAllSrv = value;
		}
	}
	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			int newTTId = conn.ExecuteScalar<int>("TT_MDF",
					new
					{
						p1 = my.Id,
						p2 = my.FrmId,
						p3 = TTId,
						p4 = tt!.Ad,
						p5 = tt!.Inf,
						p6 = tt.Psf
					},
					commandType: CommandType.StoredProcedure);
			// Userları ins/upd/del
			foreach (var r in ts)
			{
				_ = conn.Execute("TS_MDF",
					new
					{
						p1 = r.STId,
						p2 = my.FrmId,
						p4 = r.SSId,
						p3 = newTTId,
						p5 = r.Mbr,
						p6 = r.TlpKrl
					},
					commandType: CommandType.StoredProcedure);
			}
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}

		await ModalIns.CloseAsync(ModalResult.Ok());
	}

	protected override void OnInitialized()
	{
		//Modal.Show<ModalConfirm>("deneme");
		try
		{
			using var conn = db.GetConnection();
			if (TTId == 0)
			{
				tt = new();
			}
			else
			{
			tt = conn.QuerySingleOrDefault<TT>("select * from TT where TTId = @Id",
					new { Id = TTId },
					commandType: CommandType.StoredProcedure);
			}
			ts = conn.Query<TS>("TS_QRY",
					new
					{
						p1 = TTId,
						p2 = my.FrmId
					},
					commandType: CommandType.StoredProcedure).ToList();

			ts = ts.OrderByDescending(x => x.Mbr).ThenBy(y => y.SSAd).ToList();
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}


	private string Idf()
	{
		return TTId == 0 ? "yeni" : TTId.ToString("### ### ###");
	}

	public sealed class TT
	{
		public int TTId;
		public string? Ad;
		public string? Inf;
		public int Psf;
		public bool isPsf
		{
			get => Psf == 1;
			set
			{
				Psf = value ? 1 : 0;
			}
		}

	}

	public sealed class TS
	{
		public int STId;
		public int SSId;
		public string? SSAd;
		public int TlpKrl;
		public int Mbr;
		public bool isMbr
		{
			get => Mbr == 1;
			set
			{
				Mbr = value ? 1 : 0;
			}
		}
	}
}
