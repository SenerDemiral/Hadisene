@using System.Globalization
@using System.Text
@implements IDisposable
@inject NotifierService Notifier
@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (oo != null)
{
	<div class="oeCard"
		 data-Usr="A" data-Stu="Z" data-CS="G" data-CF="G"
		 data-IoC="I" data-SoF="F">

		<div class="oeHdr">
			<button class="oeBtnCancel" @onclick="Vazgec">Vazgeç</button>
			<div style="font-family: monospace;">@OOId.toSqid()#@OOId</div>
			<button class="oeBtnSave" @onclick="Kaydet" disabled="@SaveDsbl">Kaydet</button>
		</div>

		<div class="oeHdr">
			<div class="inp-radio-group">
				<InputRadioGroup @bind-Value="mode">
					<div class="inp-radio">
						<span class="material-symbols-outlined">eyeglasses</span>
						<InputRadio Value="Mode.Show" disabled="@modeRO" />
					</div>
					<div class="inp-radio">
						<span class="material-symbols-outlined">edit</span>
						<InputRadio Value="Mode.Edit" disabled="@modeRO" />
					</div>
					<div class="inp-radio">
						<span class="material-symbols-outlined">content_copy</span>
						<InputRadio Value="Mode.Clone" disabled="@modeRO" />
					</div>
					<div class="inp-radio">
						<span class="material-symbols-outlined">add</span>
						<InputRadio Value="Mode.New" disabled="@modeRO" />
					</div>
				</InputRadioGroup>
			</div>
		</div>

		<div class="oeBdy">
			<div class="oeBox oeStu">
				<div style="display:flex; gap:1rem;">
					<InputRadioGroup @bind-Value="stu">
						<div>
							<InputRadio Value="Statu.Aktif" disabled="@oo.StuROa" /> Aktif
						</div>
						<div>
							<InputRadio Value="Statu.İptal" disabled="@oo.StuROx" /> İptal
						</div>
						<div>
							<InputRadio Value="Statu.Arşiv" disabled="@oo.StuROz" /> Arşiv
						</div>
					</InputRadioGroup>
				</div>
			</div>

			<div class="oeChn">
				<span class="material-symbols-outlined">link</span>
				<input type="checkbox" @bind=@oo.Chain disabled="@oo.ChainRO" style="width:auto" />
			</div>

			<div class="oeBox oeReq">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="UUL"
					   disabled="@oo.ReqRO"
					   @bind="oo.ReqAd"
					   @bind:event="onchange"
					   @bind:after="CheckReq" />
			</div>

			<div class="oeBox oeTsk">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="TTL"
					   disabled="@oo.TskRO"
					   @bind="oo.TskAd"
					   @bind:event="onchange"
					   @bind:after="CheckTsk" />
			</div>

			<div class="oeBox oeSrv">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="SSL"
					   disabled="@oo.SrvRO"
					   @bind="oo.SrvAd"
					   @bind:event="onchange"
					   @bind:after="CheckSrv" />
			</div>

			<div class="oeBox oeAct">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="SAL"
					   disabled="@oo.ActRO"
					   @bind="oo.ActAd"
					   @bind:event="onchange"
					   @bind:after="CheckAct" />
			</div>

			<div class="oeBox oeS oeRSD">
				<div class="trh">
					<div class="date">
						<input type="date"
							   disabled="@oo.RSDro"
							   @bind:get="@oo.RSD"
							   @bind:set=CheckRSD />
					</div>
					<div class="time">
						<input type="time"
							   disabled="@oo.RSDro"
							   @bind:get="@oo.RSD"
							   @bind:set=CheckRSD />
					</div>
				</div>
			</div>
			<div class="oeBox oeF oeRFD">
				<div class="trh">
					<div class="date">
						<input type="date"
							   disabled="@oo.RFDro"
							   @bind:get="@oo.RFD"
							   @bind:set=CheckRFD />
					</div>
					<div class="time">
						<input type="time"
							   disabled="@oo.RFDro"
							   @bind:get="@oo.RFD"
							   @bind:set=CheckRFD />
					</div>
				</div>
			</div>

			<div class="oeBox oeS oeASD">
				<div class="trh">
					<div class="date">
						<input type="date"
							   disabled="@oo.ASDro"
							   @bind:get="@oo.ASD"
							   @bind:set=CheckASD />
					</div>
					<div class="time">
						<input type="time"
							   disabled="@oo.ASDro"
							   @bind:get="@oo.ASD"
							   @bind:set=CheckASD />
					</div>
				</div>
			</div>
			<div class="oeBox oeF oeAFD">
				<div class="trh">
					<div class="date">
						<input type="date"
							   disabled="@oo.AFDro"
							   @bind:get="@oo.AFD"
							   @bind:set=CheckAFD />
					</div>
					<div class="time">
						<input type="time"
							   disabled="@oo.AFDro"
							   @bind:get="@oo.AFD"
							   @bind:set=CheckAFD />
					</div>
				</div>
			</div>

			<div class="oeBox oeRf1">
				<input type="text"
					   class="refs"
					   disabled="@oo.Rf1RO"
					   maxlength="20"
					   @bind="oo.Rf1"
					   @bind:event="onchange"
					   @bind:after="(() => oo.Rf1 = oo.Rf1.toASCII())" />
			</div>
			<div class="oeBox oeRf2">
				<input type="text"
					   class="refs"
					   disabled="@oo.Rf2RO"
					   maxlength="20"
					   @bind="oo.Rf2"
					   @bind:event="onchange"
					   @bind:after="(() => oo.Rf2 = oo.Rf2.toASCII())" />
			</div>

			<div class="oeBox oeInf">
				<InputTextArea @bind-Value="oo.Inf"
							   rows="2"
							   disabled="@oo.InfRO" />
			</div>

		</div>

		<div class="oeFtr">FOOTER</div>

	</div>

	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SAL">
		@foreach (var r in sad!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="UUL">
		@foreach (var r in uud!)
		{
			<option value="@r.Key" />
		}
	</datalist>

}

@* <details>
	<summary>Details</summary>
	Something small enough to escape casual notice.
</details>
 *@

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int OOId { get; set; } = 0;
	private OO? oo, ooo;
	public enum Mode { Show, Edit, Clone, New };
	public string[] ModeT = ["Oku", "Edit", "Çoğalt", "Yeni"];
	private Dictionary<string, int>? ssd, ttd, sad, uud;
	private bool SaveDsbl = true;

	public enum Statu { Aktif = 'A', İptal = 'X', Arşiv = 'Z' };
	public Statu stu;
	@* min="@(DateTime.Today.ToString("yyyy-MM-ddTHH:mm"))" *@

	private void CheckRSD(DateTime? val)
	{
		// null olmaz
		DateTime min = oo.InsTS == null ? DateTime.Now.AddMinutes(10) : (DateTime)oo.InsTS;

		// Time part
		if (val.HasValue && oo!.RSD.HasValue && val.Value.TimeOfDay != TimeSpan.Zero)
			val = oo.RSD!.Value.Date.Add(val.Value.TimeOfDay);

		if (val == null || val < min)
			oo!.RSD = min;
		else
			oo!.RSD = val;

		CheckRFD(oo.RFD);
	}
	private void CheckRFD(DateTime? val)
	{
		if (val == null || val < oo.RSD)
			oo!.RFD = oo.RSD!.Value.AddHours(1);
		else
			oo.RFD = val;
	}

	private void CheckASD(DateTime? value)
	{
		DateTime min = oo.InsTS == null ? DateTime.Now.AddMinutes(5) : (DateTime)oo.InsTS;

		if (value == null)
			oo.ASD = null;
		else if (value < min)
			oo.ASD = min;
		else
			oo.ASD = value;

		CheckAFD(oo.AFD);
	}
	private void CheckAFD(DateTime? value)
	{
		if (oo.ASD == null)
			oo.AFD = null;
		else if (value != null && value < oo.ASD)
			oo.AFD = oo.ASD.Value.AddMinutes(1);
		else
			oo.AFD = value;
	}

	//private string mode = "E";	// Edit, Duplicate/Clone, New/Insert
	private bool modeRO;
	private Mode _mode = Mode.Show;
	public Mode mode
	{
		get => _mode;
		set
		{
			// mode bir kere değişebilir, yanlış yaptıysa çık/gir yapsın
			modeRO = true;
			ModeChanging(_mode, value);
			_mode = value;
			StateHasChanged();

		}
	}
	private void ModeChanging(Mode oldMode, Mode newMode)
	{
		DateTime rsd = DateTime.Today.AddDays(1);
		// Ilk girişte rec kopyasını al
		if (newMode == Mode.New)
		{
			SaveDsbl = false;
			oo = new();
			InitROfalse();
			oo.StuROa = true;
			oo.StuROx = true;
			oo.StuROz = true;


			oo.RSD = DateTime.Today.AddDays(1);
			oo.RFD = DateTime.Today.AddDays(2);
			oo.ASDro = true;
			oo.AFDro = true;
			oo.ChainRO = true;

			oo.ReqId = my.Id;
			oo.ReqAd = my.Ad;

			if (ttd?.Count == 1)
			{
				oo.TskId = ttd.Values.ElementAt(0);
				oo.TskAd = ttd.Keys.ElementAt(0);
			}
			if (ssd?.Count == 1)
			{
				oo.SrvId = ssd.Values.ElementAt(0);
				oo.SrvAd = ssd.Keys.ElementAt(0);
			}
			ooo = oo.ShallowCopy();
		}
		if (newMode == Mode.Clone)
		{
			SaveDsbl = false;
			InitROfalse();
			oo.StuROa = true;
			oo.StuROx = true;
			oo.StuROz = true;

			oo.OOId = 0;    // Insert

			oo.ReqId = my.Id;
			oo.ReqAd = my.Ad;

			oo.RSD = DateTime.Today.AddDays(1);
			oo.RFD = DateTime.Today.AddDays(2);
			oo.ASD = null;
			oo.AFD = null;
			oo.ASDro = true;
			oo.AFDro = true;
		}
		if (newMode == Mode.Edit)
		{
			// Yeni rec = initialRec then update
			// Yetkisine göre hangi alanları değiştirebilir (DB de tanımlı aslında)
			// Yetkililer
			// Ytk = 1/2 ise
			// Usr = Req ve ASD = null ise

			if (oo.isEdt) // 1:Admn, 3:Dntc
			{
				SaveDsbl = false;
				InitROfalse();
				oo.ChainRO = true;
			}
			//else if (my.Id == oo.ReqId && oo.ASD == null)   // İsteyen ve Başlamamışsa
			// else if (oo.isEdt)  // DB'den
			// {
			// 	SaveDsbl = false;
			// 	InitROfalse();

			// 	oo.StuROa = true;
			// 	oo.StuROx = false;    // Iptal edebilmeli
			// 	oo.StuROz = true;
			// 	oo.ASDro = true;
			// 	oo.AFDro = true;
			// 	oo.ChainRO = true;
			// }

		}
	}

	private void InitROfalse()
	{
		oo.StuROa = false;
		oo.StuROx = false;
		oo.StuROz = false;
		oo.InfRO = false;
		oo.Rf1RO = false;
		oo.Rf2RO = false;
		// oo.ReqRO = false; Değişmez
		oo.SrvRO = false;
		oo.TskRO = false;
		oo.ActRO = false;
		oo.RSDro = false;
		oo.RFDro = false;
		oo.ASDro = false;
		oo.AFDro = false;
		oo.ChainRO = false;
	}

	private void CheckReq()
	{
		if (uud!.TryGetValue(oo.ReqAd, out var nid))
		{
			oo.ReqId = nid;
		}
		else
			oo.ReqAd = ooo.ReqAd;
	}
	private void CheckSrv()
	{
		if (ssd!.TryGetValue(oo.SrvAd, out var nid))
		{
			oo.SrvId = nid;
			SrvActLU(nid);

			if (!String.IsNullOrEmpty(oo.ActAd) && sad!.TryGetValue(oo.ActAd, out var nid2))
			{
				oo.ActId = nid2;
			}
			else
			{
				oo.ActId = 0;
				oo.ActAd = "";
			}
			//CheckAct();
		}
		else
			oo.SrvAd = ooo.SrvAd;
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(oo.TskAd, out var nid))
		{
			oo.TskId = nid;
		}
		else
			oo.TskAd = ooo.TskAd;
	}
	private void CheckAct()
	{
		if (sad!.TryGetValue(oo.ActAd, out var nid))
		{
			oo.ActId = nid;
		}
		else
			oo.ActAd = ooo.ActAd;
	}

	private async Task Kaydet()
	{
		// Chain == true
		// Öncekinde CId == 0 ise, her ikisine de aynı CId yi koy
		using var conn = db.GetConnection();

		if (oo.Chain && ooo.CId == 0)
		{
			int cid = conn.ExecuteScalar<int>("CID_NEW", new { }, commandType: CommandType.StoredProcedure);
			oo.CId = cid;   // Şimdikine

			// Öncekine CId koy
			int oldOOId = ooo.OOId;
			conn.Execute("update OO set CId = @CId where OOId = @OOId", new { CId = cid, OOId = oldOOId });
		}

		oo.Stu = ((char)((int)stu)).ToString();

		try
		{
			// SP parametreleri DB deki sırasıyla gönderilmeli
			// refId = Ins ise yeni OOId, Upd ise mevcut OOId
			int refId = conn.ExecuteScalar<int>("OO_MDF",
			new
			{
				p1 = my.Id,
				p2 = oo.OOId,
				p3 = oo.Stu,
				p4 = my.FrmId,
				p5 = oo.CId,
				p6 = oo.ReqId,
				p7 = oo.SrvId,
				p8 = oo.TskId,
				p9 = oo.ActId,
				pA = oo.RSD,
				pB = oo.ASD,
				pC = oo.RFD,
				pD = oo.AFD,
				pE = oo.Inf,
				pF = oo.Rf1,
				pG = oo.Rf2,
			},
			commandType: CommandType.StoredProcedure);


			string? ordUsrs = conn.ExecuteScalar<string>("OO_USRS", new { p1 = refId },
			commandType: CommandType.StoredProcedure);

			var key = oo.OOId == 0 ? "IO" : oo.Stu != "A" ? "DO" : "UO";
			await Notifier.Invoke(key, new NotifyArgs
				{
					FFId = my.FrmId,
					UUId = my.Id,
					OOId = refId,
					CId = oo.CId,
					OrdUsrs = ordUsrs
				});

			await ModalIns.CloseAsync(ModalResult.Ok());
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalWarning>(hata);
		}

	}
	private async Task Vazgec() => await ModalIns.CancelAsync();

	protected override void OnInitialized()
	{
		try
		{
			Read();
			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			// Modal.Show<Confirm>(hata);
		}
	}

	private void Read()
	{
		using var conn = db.GetConnection();
		ssd = conn.Query<SS>("SS_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		ttd = conn.Query<TT>("TT_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		uud = conn.Query<UU>("UU_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

		//oo = conn.QuerySingle<OO>($"select * from OO_SEL({OOId})");
		if (OOId == 0)
		{
			mode = Mode.New;
		}
		else
		{
			oo = conn.QuerySingle<OO>("OO_SEL",
			new { p1 = my.Id, p2 = OOId },
			commandType: CommandType.StoredProcedure);

			ooo = oo.ShallowCopy();
		}
		//Srv Actors
		SrvActLU(oo.SrvId);

		//oo.StuRO = oo.Stu != "A" ? true : false;
		stu = Statu.Aktif;
	}

	private void SrvActLU(int SSId)
	{
		using var conn = db.GetConnection();
		sad = conn.Query<UU>("SA_LU", new { SSId = oo.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

		// DB de sort ediliyor
		//var list = conn.Query<UU>("SA_LU", new { SSId = oo.SrvId }, commandType: CommandType.StoredProcedure).ToList();
		//list.Sort((x, y) => String.Compare(x.Ad, y.Ad, new CultureInfo("tr-TR"), CompareOptions.IgnoreCase));
		// sad = list.ToDictionary(k => k.Ad, e => e.Id);
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		// await InvokeAsync(() =>
		// {
		// 	StateHasChanged();
		// });
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class TT
	{
		public int Id;
		public string Ad;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}
}
