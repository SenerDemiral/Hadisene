@page "/ordedit"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable
@inject NotifierService Notifier
@inject AppState AppState
@inject IDbCon db
@inject IModalService Modal

<h3>OrdEdit</h3>
<div class="oeCard" data-Usr="A" data-Stu="Z" data-CS="G" data-CF="G"
	 data-IoC="I" data-SoF="F">
	<div class="oeHdr">
		<button class="oeBtnCancel">Vazgeç</button>
		@* 		<div class="oeHdrTxt">Edit</div>
		<button class="oeBtnClone">Çoğalt</button>
		<button class="oeBtnNew">Yeni</button>
		*@
		<button class="oeBtnSave">Kaydet</button>
	</div>
	
	<div class="oeHdr">
		<InputRadioGroup @bind-Value="mode">
			@foreach (var mode in Enum.GetValues<Mode>())
			{
				<div>
					<label>
						<InputRadio Value="mode" disabled="@modeRO" />
						@ModeT[(int)mode]
					</label>
				</div>
			}
		</InputRadioGroup>
	</div>
	<div class="oeBdy">
		<button class="oePin" data-Pin="0"></button>
		<div class="oeBox oeReq">Kezban</div>
		<div class="oeBox oeSbj">Bodrum</div>
		<div class="oeBox oeTsk"><input type="text" disabled="@rec.TskRO" /> </div>
		<div class="oeBox oeInf">
			<textarea disabled="@rec.TskRO" name="w3review" maxlength="1000">
At w3schools.com you will learn how to make a website. They offer free tutorials in all web development technologies.
			</textarea>
		</div>
		<div class="oeBox oeAct">Şener Demiral</div>

		<div class="oeBox oeS oeRSD">22.04.24 09:00</div>
		<div class="oeBox oeS oeASD">gecikti</div>
		<div class="oeBox oeS oeDSH">xxx</div>

		<div class="oeBox oeF oeRFD">22.04.24 15:00</div>
		<div class="oeBox oeF oeAFD">8h bitmesi gerek</div>
		<div class="oeBox oeF oeDFH">-8</div>
	</div>
	<div class="oeFtr">FOOTER</div>
</div>

@*
			<details>
				<summary>Details</summary>
				Something small enough to escape casual notice.
			</details>

<details>
	<summary>Details</summary>
	Something small enough to escape casual notice.
</details>

<div>aaaaaaaaaaaaaaaaaaaaaaaa</div>
<div>bbbbbbbbbbbbbbbbbbbbbbbbbbbb</div>
 *@

@code {
	private Rec rec = new();
	public enum Mode { Show, Edit, Clone, New };
	public string[] ModeT = ["Oku", "Edit", "Çoğalt", "Yeni"];

	//private string mode = "E";	// Edit, Duplicate/Clone, New/Insert
	private bool modeRO;
	private Mode _mode = Mode.Show;
	public Mode mode
	{
		get => _mode;
		set
		{
			// mode bir kere değişebilir, yanlış yaptıysa çık/gir yapsın
			ModeChanging(_mode, value);
			_mode = value;
			//modeRO = !modeRO; // Deneme
		}
	}
	private void ModeChanging(Mode oldMode, Mode newMode)
	{
		// Ilk girişte rec kopyasını al
		if (newMode == Mode.New)
		{
			// Yeni rec
		}
		if (newMode == Mode.Clone)
		{
			// Yeni rec = initialRec then insert
			rec.RSD = null;
			rec.RFD = null;
			rec.ASD = null;
			rec.AFD = null;
		}
		if (newMode == Mode.Edit)
		{
			// Yeni rec = initialRec then update
			// Yetkisine göre hangi alanları değiştirebilir (DB de tanımlı aslında)
		}
		rec.ASD = DateTime.Today;

	}

	private void FieldCheck()
	{
		// Stu=A ise Ytk(1/2) tüm alanları değiştirebilir
		// Stu=X/Z ise hiçbirşey değiştirilemez
		rec.RSDro = rec.ASD != null;
		rec.RFDro = rec.AFD != null;
	}
	private void Kaydet()
	{

	}
	private void Vazgec()
	{

	}

	protected override async Task OnInitializedAsync()
	{

		using var conn = db.GetConnection();
		try
		{
			//UsrTkn = "A";   //Deneme
			// var x = conn.QuerySingle("select * from USR_ENTER(@Tkn)", new { Tkn = UsrTkn });

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			// Modal.Show<Confirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		await InvokeAsync(() =>
		{
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class Rec
	{
		public int SbjId;
		public string? SbjAd;
		public bool SbjRO;

		public int TskId;
		public string? TskAd;
		public bool TskRO;

		public DateTime? RSD;
		public bool RSDro;
		public DateTime? RFD;
		public bool RFDro;
		public DateTime? ASD;
		public bool ASDro;
		public DateTime? AFD;
		public bool AFDro;
	}
}
