@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable
@inject NotifierService Notifier
@inject AppState appState
@inject IDbCon db
@inject IModalService Modal


@if (oo != null)
{
	<div class="oeCard"
		 data-Usr="A" data-Stu="Z" data-CS="G" data-CF="G"
		 data-IoC="I" data-SoF="F">

		<div class="oeHdr">
			<button class="oeBtnCancel" @onclick="Vazgec">Vazgeç</button>
			<div>#@OOId</div>
			<button class="oeBtnSave" @onclick="Kaydet">Kaydet</button>
		</div>

		<div class="oeHdr">
			<InputRadioGroup @bind-Value="mode">
				@foreach (var mode in Enum.GetValues<Mode>())
				{
					<div>
						<label>
							<InputRadio Value="mode" disabled="@modeRO" />
							@ModeT[(int)mode]
						</label>
					</div>
				}
			</InputRadioGroup>
		</div>

		<div class="oeBdy">
			<div class="oeBox oeStu" >
				<div style="display:flex; justify-content: center; gap:1rem;">
					<InputRadioGroup @bind-Value="stu">
						<div>
							<InputRadio Value="Statu.Aktif" disabled="@oo.StuROa" />
							Aktif
						</div>
						<div>
							<InputRadio Value="Statu.İptal" disabled="@oo.StuROx" />
							İptal
						</div>
						<div>
							<InputRadio Value="Statu.Arşiv" disabled="@oo.StuROz" />
							Arşiv
						</div>
					</InputRadioGroup>
				</div>
			</div>
			<div class="oeBox oeReq">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="UUL"
					   disabled="@oo.ReqRO"
					   @bind="oo.ReqAd"
					   @bind:event="onchange"
					   @bind:after="CheckReq" />
			</div>
			<div class="oeBox oeSbj">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="SSL"
					   disabled="@oo.SbjRO"
					   @bind="oo.SbjAd"
					   @bind:event="onchange"
					   @bind:after="CheckSbj" />
			</div>

			<div class="oeBox oeTsk">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="TTL"
					   disabled="@oo.TskRO"
					   @bind="oo.TskAd"
					   @bind:event="onchange"
					   @bind:after="CheckTsk" />
			</div>

			<div class="oeBox oeAct">
				<input type="text"
					   maxlength="30"
					   size="30"
					   list="SAL"
					   disabled="@oo.ActRO"
					   @bind="oo.ActAd"
					   @bind:event="onchange"
					   @bind:after="CheckAct" />
			</div>

			<div class="oeBox oeS oeRSD">
				<input type="datetime-local"
					   disabled="@oo.RSDro"
					   @bind-value="@oo.RSD" />
			</div>
			<div class="oeBox oeS oeASD">
				<input type="datetime-local"
					   disabled="@oo.ASDro"
					   @bind-value="@oo.ASD" />
			</div>

			<div class="oeBox oeF oeRFD">
				<input type="datetime-local"
					   disabled="@oo.RFDro"
					   @bind-value="@oo.RFD" />
			</div>
			<div class="oeBox oeF oeAFD">
				<input type="datetime-local"
					   disabled="@oo.AFDro"
					   @bind-value="@oo.AFD" />
			</div>

			<div class="oeBox oeInf">
				<InputTextArea @bind-Value="oo.Inf"
							   rows="2"
							   disabled="@oo.InfRO" />
			</div>

		</div>

		<div class="oeFtr">FOOTER</div>

	</div>

	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SAL">
		@foreach (var r in sad!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="UUL">
		@foreach (var r in uud!)
		{
			<option value="@r.Key" />
		}
	</datalist>

}

@* <details>
	<summary>Details</summary>
	Something small enough to escape casual notice.
</details>
 *@

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int OOId { get; set; } = 0;
	private OO? oo, ooo;
	public enum Mode { Show, Edit, Clone, New };
	public string[] ModeT = ["Oku", "Edit", "Çoğalt", "Yeni"];
	private Dictionary<string, int>? ssd, ttd, sad, uud;

	public enum Statu { Aktif='A', İptal='X', Arşiv='Z' };
	public Statu stu;


	//private string mode = "E";	// Edit, Duplicate/Clone, New/Insert
	private bool modeRO;
	private Mode _mode = Mode.Show;
	public Mode mode
	{
		get => _mode;
		set
		{
			// mode bir kere değişebilir, yanlış yaptıysa çık/gir yapsın
			modeRO = true;
			ModeChanging(_mode, value);
			_mode = value;
			StateHasChanged();

		}
	}
	private void ModeChanging(Mode oldMode, Mode newMode)
	{

		// Ilk girişte rec kopyasını al
		if (newMode == Mode.New)
		{
			oo = new();
			InitROfalse();
			oo.StuROa = true;
			oo.StuROx = true;
			oo.StuROz = true;
			oo.ReqId = appState.UsrId;
			oo.ReqAd = appState.UsrAd;
			oo.ReqRO = true;
			oo.RSD = DateTime.Today;
			oo.ASDro = true;
			oo.AFDro = true;

			ooo = oo.ShallowCopy();
		}
		if (newMode == Mode.Clone)
		{
			InitROfalse();
			oo.StuROa = true;
			oo.StuROx = true;
			oo.StuROz = true;

			oo.OOId = 0;    // Insert

			if (appState.UsrYtk > 2)
			{
				oo.ReqId = appState.UsrId;
				oo.ReqAd = appState.UsrAd;
				oo.ReqRO = true;
			}
			oo.RSD = null;
			oo.RFD = null;
			oo.ASD = null;
			oo.AFD = null;
			oo.ASDro = true;
			oo.AFDro = true;
		}
		if (newMode == Mode.Edit)
		{
			// Yeni rec = initialRec then update
			// Yetkisine göre hangi alanları değiştirebilir (DB de tanımlı aslında)
			// Yetkililer
			// Ytk = 1/2 ise
			// Usr = Req ve ASD = null ise

			if (appState.UsrYtk <= 2) // Admn, Ytk
			{
				InitROfalse();
			}
			else if (appState.UsrId == oo.ReqId && oo.ASD == null)   // İsteyen ve Başlamamışsa
			{
				InitROfalse();

				oo.StuROa = true;
				oo.StuROx = false;    // Iptal edebilmeli
				oo.StuROz = true;
				oo.ReqRO = true;
				oo.ASDro = true;
				oo.AFDro = true;
			}
		}
	}

	private void InitROfalse()
	{
		oo.StuROa = false;
		oo.StuROx = false;
		oo.StuROz = false;
		oo.InfRO = false;
		oo.ReqRO = false;
		oo.SbjRO = false;
		oo.TskRO = false;
		oo.ActRO = false;
		oo.RSDro = false;
		oo.RFDro = false;
		oo.ASDro = false;
		oo.AFDro = false;
	}

	private void CheckReq()
	{
		if (uud!.TryGetValue(oo.ReqAd, out var nid))
		{
			oo.ReqId = nid;
		}
		else
			oo.ReqAd = ooo.ReqAd;
	}
	private void CheckSbj()
	{
		if (ssd!.TryGetValue(oo.SbjAd, out var nid))
		{
			oo.SbjId = nid;
			SbjActLU(nid);

			if (!String.IsNullOrEmpty(oo.ActAd) && sad!.TryGetValue(oo.ActAd, out var nid2))
			{
				oo.ActId = nid2;
			}
			else
			{
				oo.ActId = 0;
				oo.ActAd = "";
			}
			//CheckAct();
		}
		else
			oo.SbjAd = ooo.SbjAd;
	}
	private void CheckTsk()
	{
		if (ttd!.TryGetValue(oo.TskAd, out var nid))
		{
			oo.TskId = nid;
		}
		else
			oo.TskAd = ooo.TskAd;
	}
	private void CheckAct()
	{
		if (sad!.TryGetValue(oo.ActAd, out var nid))
		{
			oo.ActId = nid;
		}
		else
			oo.ActAd = ooo.ActAd;
	}

	private async Task Kaydet()
	{
		oo.Stu = ((char)((int)stu)).ToString();

		try
		{
			using var conn = db.GetConnection();
			// SP parametreleri DB deki sırasıyla gönderilmeli
			// refId = Ins ise yeni OOId, Upd ise mevcut OOId
			int refId = conn.ExecuteScalar<int>("OO_MDF",
				new
				{
					p1 = appState.UsrId,
					p2 = oo.OOId,
					p0 = oo.Stu,
					p3 = appState.UsrFrmId,
					p4 = oo.ReqId,
					p5 = oo.SbjId,
					p6 = oo.TskId,
					p7 = oo.ActId,
					p8 = oo.RSD,
					p9 = oo.ASD,
					pA = oo.RFD,
					pB = oo.AFD,
					pC = oo.Inf
				},
				commandType: CommandType.StoredProcedure);

			
			string? ordUsrs = conn.ExecuteScalar<string>("OO_USRS", new { p1 = refId },
				commandType: CommandType.StoredProcedure);
			
			var key = oo.OOId == 0 ? "IO" : "UO";
			await Notifier.Invoke(key, new NotifyArgs
				{
					FFId = appState.UsrFrmId,
					UUId = appState.UsrId,
					OOId = refId,
					OrdUsrs = ordUsrs
				});
			await ModalIns.CloseAsync(ModalResult.Ok());
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalWarning>(hata);
		}

	}
	private async Task Vazgec() => await ModalIns.CancelAsync();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			Read();
			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			// Modal.Show<Confirm>(hata);
		}
	}

	private void Read()
	{
		using var conn = db.GetConnection();
		//oo = conn.QuerySingle<OO>($"select * from OO_SEL({OOId})");
		if (OOId == 0)
		{
			mode = Mode.New;
		}
		else
		{
			oo = conn.QuerySingle<OO>("OO_SEL",
				new { Id = OOId }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.StoredProcedure);

			ooo = oo.ShallowCopy();
		}
		ssd = conn.Query<SS>("SS_LU", new { FFId = appState.UsrFrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		ttd = conn.Query<TT>("TT_LU", new { FFId = appState.UsrFrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		uud = conn.Query<UU>("UU_LU", new { FFId = appState.UsrFrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

		//Sbj Actors
		sad = conn.Query<UU>("SA_LU", new { SSId = oo.SbjId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

		//oo.StuRO = oo.Stu != "A" ? true : false;
		stu = Statu.Aktif;
	}

	private void SbjActLU(int SSId)
	{
		using var conn = db.GetConnection();
		sad = conn.Query<UU>("SA_LU", new { SSId = oo.SbjId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		await InvokeAsync(() =>
		{
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class TT
	{
		public int Id;
		public string Ad;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}

}
