@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState appState
@inject IDbCon db
@inject IModalService Modal
@inject NotifierService Notifier
@implements IAsyncDisposable
@inject NavigationManager navigationManager

@* <CascadingBlazoredModal @rendermode="InteractiveServer"></CascadingBlazoredModal> *@
@* <CascadingBlazoredModal /> *@


<div class="nav-hdr">
	<div class="menu">
		<button class="menu-btn" @onclick="ShowMenu">
			<span class="material-symbols-outlined">
				menu
			</span>
		</button>
		<div class="menu-content" data-show="@cbSM">
			<a href="/">
				<span class="material-symbols-outlined">
					home
				</span>
			</a>
			<a href="counter">Counter</a>
			<div>deneme</div>
			<br>
			<a href="usrlogin">
				<span class="material-symbols-outlined">
					login
				</span>
				Login
			</a>
			<hr>
			<a href="login">
				<span class="material-symbols-outlined">
					logout
				</span>
				Logout
			</a>
		</div>
	</div>

	<div>Görev <InputCheckbox @bind-Value="cbUsrDashBoard" /></div>
	<div>@appState.UsrAd / @appState.UsrYtk</div>


	<select @bind="menu" >
		<optgroup label="-">
			<option value="">🏠 HOME</option>
			@if (appState.UsrId != 0)
			{
				<option disabled />
				<option value="ordActive/Stu=A">🚧 AktifGörevler</option>
			}
			<option disabled />
			<option value="ordEdit">Edit</option>
			@if (appState.UsrId != 0)
			{
				<option disabled />
				<option value="ordMsg">OrdMsg</option>
			}
			<option disabled />
			<option value="counter">🚧 Counter</option>
			<option disabled />

			@if (appState.UsrId == 0)
			{
				<option value="Login">↗️ Login</option>
			}
			else
			{
				<option value="Logout">↙️ Logout</option>
			}
			<option disabled />
		</optgroup>
	</select>

	<select @onchange="ProcessSelection">
		<optgroup label="-">
			<option value="">🏠 HOME</option>
			@if (appState.UsrId != 0)
			{
				<option disabled />
				<option value="ordActive/Stu=A">🚧 AktifGörevler</option>
			}
			<option disabled />
			<option value="ordEdit">Edit</option>
			@if (appState.UsrId != 0)
			{
				<option disabled />
				<option value="ordMsg">OrdMsg</option>
			}
			<option disabled />
			<option value="counter">🚧 Counter</option>
			<option disabled />

			@if (appState.UsrId == 0)
			{
				<option value="Login">↗️ Login</option>
			}
			else
			{
				<option value="Logout">↙️ Logout</option>
			}
			<option disabled />
		</optgroup>
	</select>
</div>


@if (cbUsrDashBoard)
{
	<UsrDashBoard />
}

@code {
	//[CascadingParameter] public IModalService Modal { get; set; } = default!;
	[Parameter] public string? usrTkn { get; set; } = default;
	private bool cbUsrDashBoard = false;
	private int cbSM;

	private void ShowMenu()
	{
		cbSM = cbSM == 0 ? 1 : 0;
	}

	async Task ProcessSelection(ChangeEventArgs args)
	{
		string value = args.Value.ToString();

		if (value == "Login")
		{
			await MyLogin();
		}
		else if (value == "Logout")
		{
			await MyLogout();
		}
		else
		{
			navigationManager.NavigateTo(value);
		}
	}

	private string _menu;
	public string menu
	{
		get => _menu;
		set
		{
			_menu = value;
			if (value == "Login")
			{
				MyLogin();
			}
			else if (value == "Logout")
			{
				MyLogout();
			}
			else
			{
				navigationManager.NavigateTo(value);
			}
		}
	}


	public async Task MyLogin()
	{
		var options = new ModalOptions()
			{
				HideHeader = true,
				Size = ModalSize.Custom,
				SizeCustomClass = "custom-size-modal",
				Position = ModalPosition.Middle
			};
		ModalParameters mp = new();

		//mp.Add("imgSrc", rec.Msg.Substring(0, rec.Msg.IndexOf("?")));
		//Modal.Show<ModalImage>("", mp, options);

		var messageForm = Modal.Show<LoginForm>("Login");
		var result = await messageForm.Result;
		if (result.Confirmed)
		{
			var prms = (LgnPrms)result.Data;

			using var conn = db.GetConnection();
			int uuId = conn.ExecuteScalar<int>("USR_LOGIN",
				new { a = prms!.Id, b = prms.Pwd, c = usrTkn },	commandType: CommandType.StoredProcedure);

			if (uuId > 0)
			{
				//await UsrEnter();

				await Notifier.Invoke("UsrLogIn", new NotifyArgs { UsrTkn = usrTkn });
				navigationManager.NavigateTo("");
			}
		}
	}

	public async Task MyLogout()
	{
		using var conn = db.GetConnection();
		conn.Execute("USR_LOGOUT", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

		await Notifier.Invoke("UsrLogOut", new NotifyArgs { UsrTkn = usrTkn });
		navigationManager.NavigateTo("");
	}

	protected override async Task OnInitializedAsync()
	{
		await UsrEnter();
	}

	protected async Task UsrEnter()
	{
		using var conn = db.GetConnection();
		try
		{
			//UsrTkn = "A";   //Deneme

			//var x = conn.QuerySingle("select * from USR_ENTER(@Tkn)", new { Tkn = UsrTkn });
			//var x = conn.QuerySingle($"select * from USR_ENTER('{UsrTkn}')");

			// SP parametreleri DB deki sırasıyla gönderilmeli
			var x = conn.QuerySingle<AppState>("USR_ENTER", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

			appState.UsrTkn = usrTkn;
			appState.UsrId = x.UsrId;
			appState.UsrAd = x.UsrAd;
			appState.UsrYtk = x.UsrYtk;
			appState.UEXId = x.UEXId;
			appState.UsrFrmId = x.UsrFrmId;
			appState.UsrFrmAd = x.UsrFrmAd;
			appState.UsrSrvStr = x.UsrSrvStr;

			await Notifier.Invoke("UsrEnter", new NotifyArgs
				{
					UsrId = appState.UsrId,
					FFId = appState.UsrFrmId
				});

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "UsrLogIn" && value.UsrTkn == usrTkn)
		{
			await UsrEnter();
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
		if (key == "UsrLogOut" && value.UsrTkn == usrTkn)
		{
			appState.UsrId = 0;
			appState.UsrAd = null;

			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
	}

	public async ValueTask DisposeAsync()
	{
		// Firefox 3dak sonra gönderiyor
		// In this scenario dispose gets called after around 3 minutes (by default) when we detect the connection has been lost and the client doesn't re-connect as part of disposing the entire circuit.

		Notifier.Notify -= OnNotify;

		using var conn = db.GetConnection();
		conn.Execute("USR_EXIT", new { UEXId = appState.UEXId }, commandType: CommandType.StoredProcedure);

		await Notifier.Invoke("UsrExit", new NotifyArgs());

		// Suppress finalization.
		GC.SuppressFinalize(this);
	}
}
