@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState appState
@inject IDbCon db
@inject IModalService Modal
@inject NotifierService Notifier
@implements IAsyncDisposable
@inject NavigationManager navigationManager

@* <CascadingBlazoredModal @rendermode="InteractiveServer"></CascadingBlazoredModal> *@
@* MainLayout da tanımlı *@

<div class="top">
	@if (appState.UsrId > 0)
	{
		<div><InputCheckbox @bind-Value="cbUsrDashBoard" /> @appState.UsrAd @appState.UsrYtkAd</div>
	}
	else
	{
		<div>@appState.UsrAd</div>
	}

	<InputSelect TValue="string"
				 Value="selVal"
				 ValueChanged="MenuChange"
				 ValueExpression="@(() => selVal)"
	style="font-size:16px">
		<option value="">🏠 HOME</option>
		@if (appState.UsrId != 0)
		{
			<option value="ordActive">🚧 Görevler &nbsp;&nbsp;</option>
			@if (appState.UsrYtk == 1)
			{
				<optgroup label="Tanımlar">
					<option value="SbjQry">⚓ Birim</option>
					<option value="TskQry">📝 Görev</option>
					<option value="UsrQry">👫 Kullanıcı &nbsp;&nbsp;</option>
					<option value="PtrQry">⛓️ Şablon</option>

				</optgroup>
				<option value="">💤 Arşiv</option>
			}
			<option value="Logout">↙️ Logout</option>
		}
		else
		{
			<option value="Login">↗️ Login</option>
		}
		<option value="counter">&emsp;🚧 Deneme</option>
		<option value="counter">&nbsp;🚧 Deneme</option>

	</InputSelect>
</div>
<div class="btm">
	<div>&copy;Şener Demiral 2024</div>
	<div>User</div>
</div>


@if (cbUsrDashBoard)
{
	<UsrDashBoard />
}

@code {
	//[CascadingParameter] public IModalService Modal { get; set; } = default!;
	[Parameter] public string? usrTkn { get; set; } = default;
	private bool cbUsrDashBoard = false;

	private string selVal = "";
	private async Task MenuChange(string selectedValue)
	{
		if (selectedValue == "Login")
		{
			await MyLogin();
			cbUsrDashBoard = false;
		}
		else if (selectedValue == "Logout")
		{
			await MyLogout();
			cbUsrDashBoard = false;
		}
		else if (selectedValue == "SbjQry")
		{
			await ShowSbjQry();
		}
		else if (selectedValue == "TskQry")
		{
			await ShowTskQry();
		}
		else if (selectedValue == "UsrQry")
		{
			await ShowUsrQry();
		}
		else if (selectedValue == "PtrQry")
		{
			await ShowPtrQry();
		}
		else
		{
			selVal = selectedValue;
			navigationManager.NavigateTo(selectedValue);
		}
	}

	private ValueTask ShowUsrQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<UsrQry>("Kullanıcılar", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});
		return ValueTask.CompletedTask;
	}

	private async Task ShowTskQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<TskQry>("Görevler", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}
	private async Task ShowSbjQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<SbjQry>("Birimler", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}
	private async Task ShowPtrQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<PtrQry>("Şablonlar", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}


	public async Task MyLogin()
	{
		var options = new ModalOptions()
			{
				HideHeader = true,
				Size = ModalSize.Small,
				// SizeCustomClass = "custom-size-modal",
				Position = ModalPosition.Middle
			};
		ModalParameters mp = new();

		var messageForm = Modal.Show<ModalLogin>("Login", mp, options);
		var result = await messageForm.Result;
		if (result.Confirmed)
		{
			var prms = (LgnPrms)result.Data;

			try
			{
				using var conn = db.GetConnection();
				int uuId = conn.ExecuteScalar<int>("USR_LOGIN",
					new { a = prms!.Id, b = prms.Pwd, c = usrTkn }, commandType: CommandType.StoredProcedure);

				if (uuId > 0)
				{
					//await UsrEnter();

					await Notifier.Invoke("UsrLogIn", new NotifyArgs { UsrTkn = usrTkn });
					navigationManager.NavigateTo("");
				}
			}
			catch (Exception ex)
			{
				var hata = ex.Message.Split("\r\n")[1];
				Modal.Show<ModalWarning>(hata);
				//navigationManager.NavigateTo("");
			}
		}
	}

	public async Task MyLogout()
	{
		using var conn = db.GetConnection();
		conn.Execute("USR_LOGOUT", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

		appState.UsrId = 0;
		appState.UsrAd = "Giriş Yapın";
		appState.UsrYtk = 0;
		appState.UsrFrmId = 0;
		appState.UsrFrmAd = null;

		await Notifier.Invoke("UsrLogOut", new NotifyArgs { UsrTkn = usrTkn });
		navigationManager.NavigateTo("");
	}

	protected override async Task OnInitializedAsync()
	{
		await UsrEnter();
	}

	protected async Task UsrEnter()
	{
		using var conn = db.GetConnection();
		try
		{
			//UsrTkn = "A";   //Deneme

			//var x = conn.QuerySingle("select * from USR_ENTER(@Tkn)", new { Tkn = UsrTkn });
			//var x = conn.QuerySingle($"select * from USR_ENTER('{UsrTkn}')");

			// SP parametreleri DB deki sırasıyla gönderilmeli
			var x = conn.QuerySingle<AppState>("USR_ENTER", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

			appState.UsrTkn = usrTkn;
			appState.UsrId = x.UsrId;
			appState.UsrAd = x.UsrAd;
			appState.UsrYtk = x.UsrYtk;
			appState.UEXId = x.UEXId;
			appState.UsrFrmId = x.UsrFrmId;
			appState.UsrFrmAd = x.UsrFrmAd;
			appState.UsrSrvStr = x.UsrSrvStr;

			await Notifier.Invoke("UsrEnter", new NotifyArgs
				{
					UsrId = appState.UsrId,
					FFId = appState.UsrFrmId
				});

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "UsrLogIn" && value.UsrTkn == usrTkn)
		{
			await UsrEnter();
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
		if (key == "UsrLogOut" && value.UsrTkn == usrTkn)
		{
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
	}

	public async ValueTask DisposeAsync()
	{
		// Firefox 3dak sonra gönderiyor
		// In this scenario dispose gets called after around 3 minutes (by default) when we detect the connection has been lost and the client doesn't re-connect as part of disposing the entire circuit.

		Notifier.Notify -= OnNotify;

		using var conn = db.GetConnection();
		conn.Execute("USR_EXIT", new { UEXId = appState.UEXId }, commandType: CommandType.StoredProcedure);

		await Notifier.Invoke("UsrExit", new NotifyArgs());

		// Suppress finalization.
		GC.SuppressFinalize(this);
	}
}
