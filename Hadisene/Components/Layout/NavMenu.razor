@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState my
@inject IDbCon db
@inject IModalService Modal
@inject NotifierService Notifier
@implements IAsyncDisposable
@inject NavigationManager navigationManager
@inject IJSRuntime js

@* <CascadingBlazoredModal @rendermode="InteractiveServer"></CascadingBlazoredModal> *@
@* MainLayout da tanımlı *@

<div class="top">
	@if (my.Id > 0)
	{
		<div>
			@my.Ad @my.YtkAd <InputCheckbox @bind-Value="cbUsrDashBoard" />
		</div>
	}
	else
	{
		<div>Giriş yapın</div>
	}

	<InputSelect TValue="string"
				 Value="selVal"
				 ValueChanged="MenuChange"
				 ValueExpression="@(() => selVal)" >
		<option value="">🏠 HOME</option>
		@if (my.Id != 0)
		{
			<option value="OrdStat">📈 Özet</option>
			<option value="ordActive/0/all">🚧 Talepler &nbsp;&nbsp;</option>
			@if (my.Ytk == 1)
			{
				<optgroup label="Tanımlar">
					<option value="UsrQry">👫 Kullanıcı &nbsp;&nbsp;</option>
					<option value="SbjQry">⚓ Servis</option>
					<option value="TskQry">📝 Görev</option>
					<option value="PtrQry">⛓️ Şablon</option>

				</optgroup>
				<option value="ordDone">💤 Arşiv</option>
			}
			<option value="Logout">↙️ Logout</option>
		}
		else
		{
			<option value="Login">↗️ Login</option>
		}
		@* <option value="counter">&nbsp;🚧 Deneme</option> *@
		@* <option value="Refresh">🔄 Refresh</option> *@

	</InputSelect>
</div>

<div class="btm">
	<div>&copy;Şener Demiral @(DateTime.Now.Year)</div>
	<div>@my.FrmAd</div>
</div>


@if (cbUsrDashBoard)
{
	<UsrDashBoard />
}

@code {
	//[CascadingParameter] public IModalService Modal { get; set; } = default!;
	[Parameter] public string? usrTkn { get; set; } = default;
	private bool cbUsrDashBoard = false;

	private string selVal = "";
	private async Task MenuChange(string selectedValue)
	{
		if (selectedValue == "Login")
		{
			selVal = "";
			await MyLogin();
			cbUsrDashBoard = false;
		}
		else if (selectedValue == "Logout")
		{
			await MyLogout();
			cbUsrDashBoard = false;
		}
		else if (selectedValue == "SbjQry")
		{
			await ShowSbjQry();
		}
		else if (selectedValue == "TskQry")
		{
			await ShowTskQry();
		}
		else if (selectedValue == "UsrQry")
		{
			await ShowUsrQry();
		}
		else if (selectedValue == "PtrQry")
		{
			await ShowPtrQry();
		}
		else if (selectedValue == "Refresh")
		{
			await js.InvokeVoidAsync("hardReload");
		}
		else if (selectedValue == "OrdStat")
		{
			selVal = selectedValue;
			selectedValue = $"OrdStat/{usrTkn}/{@my.Id}/{@my.Ytk}";
			navigationManager.NavigateTo(selectedValue);
		}
		else
		{
			selVal = selectedValue;
			navigationManager.NavigateTo(selectedValue);
			// navigationManager.NavigateTo(selectedValue, replace: true);
		}
	}

	private ValueTask ShowUsrQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<UsrQry>("Kullanıcılar", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});
		return ValueTask.CompletedTask;
	}
	private async Task ShowTskQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<TskQry>("Görevler", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}
	private async Task ShowSbjQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<SbjQry>("Servisler", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}
	private async Task ShowPtrQry()
	{
		ModalParameters mp = new();
		// mp.Add("OOId", oo.OOId);

		Modal.Show<PtrQry>("Şablonlar", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Medium,
					Position = ModalPosition.Middle
				});
	}


	public async Task MyLogin()
	{
		var options = new ModalOptions()
			{
				HideHeader = true,
				Size = ModalSize.Small,
				// SizeCustomClass = "custom-size-modal",
				Position = ModalPosition.Middle
			};
		ModalParameters mp = new();

		var messageForm = Modal.Show<ModalLogin>("Login", mp, options);
		var result = await messageForm.Result;
		if (result.Confirmed)
		{
			var prms = (LgnPrms)result.Data;

			try
			{
				using var conn = db.GetConnection();
				int uuId = conn.ExecuteScalar<int>("USR_LOGIN",
					new { a = prms!.Id, b = prms.Pwd, c = usrTkn }, commandType: CommandType.StoredProcedure);

				if (uuId > 0)
				{
					//await UsrEnter();

					await Notifier.Invoke("UsrLogIn", new NotifyArgs { UsrTkn = usrTkn });
					//navigationManager.NavigateTo("");
					await MenuChange("OrdStat");

				}
			}
			catch (Exception ex)
			{
				var hata = ex.Message.Split("\r\n")[1];
				Modal.Show<ModalWarning>(hata);
				//navigationManager.NavigateTo("");
			}
		}
	}

	public async Task MyLogout()
	{
		using var conn = db.GetConnection();
		conn.Execute("USR_LOGOUT", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

		my.Tkn = "";
		my.UEXId = 0;
		my.Id = 0;
		my.Ad = "Giriş Yapın";
		my.Ytk = 0;
		my.FrmId = 0;
		my.FrmAd = "";
		my.SrvSet.Clear();

		await Notifier.Invoke("UsrLogOut", new NotifyArgs { UsrTkn = usrTkn });
		navigationManager.NavigateTo("");
	}

	protected override async Task OnInitializedAsync()
	{
		selVal = "";
		await UsrEnter();
		if (my.Id > 0)
			await MenuChange("OrdStat");
	}

	protected async Task UsrEnter()
	{
		using var conn = db.GetConnection();
		try
		{
			//UsrTkn = "A";   //Deneme

			//var x = conn.QuerySingle("select * from USR_ENTER(@Tkn)", new { Tkn = UsrTkn });
			//var x = conn.QuerySingle($"select * from USR_ENTER('{UsrTkn}')");

			// SP parametreleri DB deki sırasıyla gönderilmeli
			var x = conn.QuerySingle("USR_ENTER", new { Tkn = usrTkn }, commandType: CommandType.StoredProcedure);

			// null gelmez
			my.Tkn = usrTkn;
			my.UEXId = x.UEXID;
			my.Id = x.ID;
			my.Ytk = x.YTK;
			my.Ad = x.AD;
			my.FrmId = x.FRMID;
			my.FrmAd = x.FRMAD;
			my.SrvStr = x.SRVSTR;

			await Notifier.Invoke("UsrEnter", new NotifyArgs
				{
					UUId = my.Id,
					FFId = my.FrmId
				});

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (key == "UsrLogIn" && value.UsrTkn == usrTkn)
		{
			await UsrEnter();
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
		if (key == "UsrLogOut" && value.UsrTkn == usrTkn)
		{
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
	}

	public async ValueTask DisposeAsync()
	{
		// Firefox 3dak sonra gönderiyor
		// In this scenario dispose gets called after around 3 minutes (by default) when we detect the connection has been lost and the client doesn't re-connect as part of disposing the entire circuit.

		Notifier.Notify -= OnNotify;

		using var conn = db.GetConnection();
		conn.Execute("USR_EXIT", new { UEXId = my.UEXId }, commandType: CommandType.StoredProcedure);

		await Notifier.Invoke("UsrExit", new NotifyArgs());

		// Suppress finalization.
		GC.SuppressFinalize(this);
	}
}
