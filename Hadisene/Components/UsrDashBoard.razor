@using System.Timers
@using System.Globalization
@inject IDbCon db
@inject NotifierService Notifier
@inject AppState my
@inject NavigationManager navigationManager
@implements IDisposable

@if (UDB != null)
{
	<div class="dashboard" data-pos="@pos[p]">
		<table>
			<thead>
				<tr>
					<th>
						<div onclick="@PosChanged" style="cursor:move">
							<span class="material-symbols-outlined">zoom_out_map</span>
						</div>
					</th>
					<th>Baş</th>
					<th>Bit</th>
				</tr>
			</thead>
			<tbody>
				<tr style="background-color: var(--r-color);color: wheat;">
					<td class="fld-hdr">Gecikmiş</td>
					<td>@UDB.SR <InputCheckbox @bind-Value="cbCSR" /></td>
					<td>@UDB.FR <InputCheckbox @bind-Value="cbCFR" /></td>
				</tr>
				<tr style="background-color: var(--b-color);color: wheat;">
					<td class="fld-hdr">Süresi var</td>
					<td>@UDB.SB <InputCheckbox @bind-Value="cbCSB" /></td>
					<td>@UDB.FB <InputCheckbox @bind-Value="cbCFB" /></td>
				</tr>
				<tr style="background-color: var(--g-color);color: wheat;">
					<td class="fld-hdr">Yapılmış</td>
					<td>@UDB.SG <InputCheckbox @bind-Value="cbCSG" /></td>
					<td>@UDB.FG <InputCheckbox @bind-Value="cbCFG" /></td>
				</tr>
				<tr>
					<td class="fld-hdr">Toplam</td>
					<td colspan="2">@UDB.OC</td>
				</tr>
				<tr>
					<td class="fld-hdr">Değişmiş</td>
					<td colspan="2">@UDB.OnV <input type="checkbox" @bind-value="cbOnV" /></td>
				</tr>
				<tr>
					<td>
						<span class="material-symbols-outlined">keep</span>
					</td>
					<td colspan="2">@UDB.OP  <InputCheckbox @bind-Value="cbPin" /></td>
				</tr>
				<tr>
					<td class="fld-hdr">Yeni Mesaj</td>
					<td colspan="2">@UDB.MnV <InputCheckbox @bind-Value="cbMnV" /></td>
				</tr>
				<tr class="tsk hdr">
					<td colspan="3">konu</td>
				</tr>
				<tr class="tsk">
					<td colspan="3" class="bdy">
						<div class="lst">
							@foreach (var itm in UDB.tskList)
							{
								<div>
									<input type="checkbox" @bind-value="itm.Selected" />
									@itm.Ad
								</div>
							}
						</div>
					</td>
				</tr>
				<tr class="req hdr">
					<td colspan="3">kimden</td>
				</tr>
				<tr class="req">
					<td colspan="3" class="bdy">
						<div class="lst">
							@foreach (var itm in UDB.reqList)
							{
								<div>
									<input type="checkbox" @bind-value="itm.Selected" />
									@itm.Ad
								</div>
							}
						</div>
					</td>
				</tr>
				<tr class="srv hdr">
					<td colspan="3">grup</td>
				</tr>
				<tr class="Srv">
					<td colspan="3" class="bdy">
						<div class="lst">
							@foreach (var itm in UDB.srvList)
							{
								<div>
									<input type="checkbox" @bind-value="itm.Selected" />
									@itm.Ad
								</div>
							}
						</div>
					</td>
				</tr>
				<tr class="act hdr">
					<td colspan="3">kime</td>
				</tr>
				<tr class="act">
					<td colspan="3" class="bdy">
						<div class="lst">
							@foreach (var itm in UDB.actList)
							{
								<div>
									<input type="checkbox" @bind-value="itm.Selected" />
									@itm.Ad
								</div>
							}
						</div>
					</td>
				</tr>
				<tr class="hdr">
					<td colspan="3">ref 1&2</td>
				</tr>
				<tr>
					<td colspan="3" style="padding:0;">
						<div class="lst">
							<div>
								<input type="text" maxlength="20" class="refs"
									   @bind="Rf1"
									   @bind:after="(() => Rf1 = Rf1.toASCIIqry())" />
							</div>
							<div>
								<input type="text" maxlength="20" class="refs"
									   @bind="Rf2"
									   @bind:after="(() => Rf2 = Rf2.toASCIIqry())" />
							</div>
						</div>
					</td>
				</tr>
				<tr>
					<td class="fld-hdr">Güncelleme</td>
					<td colspan="2">@UDB.LastUpd.ToShortTimeString()</td>
				</tr>

				<tr>
					<td colspan="3" style="padding:0;">
						<button @onclick="GoOrdActive" style="width: 100%;background-color: yellow;padding: 0;">
							<span class="material-symbols-outlined">search</span>
						</button>
					</td>
				</tr>

				<tr>
					<td class="ta-c">Tarih &gt;= </td>
					<td colspan="2"><input type="date" @bind="Trh1" /></td>
				</tr>
				<tr>
					<td class="ta-c">Tarih &lt; </td>
					<td colspan="2"><input type="date" @bind="Trh2" /></td>
				</tr>
			</tbody>
		</table>
	</div>
}


@code {
	private Timer timer = new(1000 * 60 * 60);
	private int cnt = 0;
	private DashBoard? UDB;
	private int p = 1;
	private string[] pos = ["TL", "TR", "BR", "BL"];
	private int dnm = 0;
	private List<int> DnmList = new();
	private bool cbCSR, cbCSB, cbCSG, cbCFR, cbCFB, cbCFG, cbPin, cbOnV, cbMnV;
	private string? Rf1;
	private string? Rf2;
	private DateTime? Trh1, Trh2;

	private void PosChanged()
	{
		p = ++p > 3 ? 0 : p;
	}

	private void GoOrdActive()
	{
		List<string> sl = new();
		List<string> acts = new();

		// sl.Add("Stu=A");	Zeten sadece Activler için çalışır

		string CS = (cbCSR ? "R" : "") + (cbCSB ? "B" : "") + (cbCSG ? "G" : "");
		if (CS.Length > 0)
			sl.Add("CS=" + CS);

		string CF = (cbCFR ? "R" : "") + (cbCFB ? "B" : "") + (cbCFG ? "G" : "");
		if (CF.Length > 0)
			sl.Add("CF=" + CF);

		if (cbPin)
			sl.Add("Pin=1");
		if (cbOnV)
			sl.Add("OnV=1");
		if (cbMnV)
			sl.Add("MnV=1");

		Add2List(sl, UDB.reqList, "ReqId=");
		Add2List(sl, UDB.srvList, "SrvId=");
		Add2List(sl, UDB.actList, "ActId=");
		Add2List(sl, UDB.tskList, "TskId=");

		if (!string.IsNullOrEmpty(Rf1))
			sl.Add($"Rf1={Rf1}");
		if (!string.IsNullOrEmpty(Rf2))
			sl.Add($"Rf2={Rf2}");

		if (Trh1 is not null)
			sl.Add($@"Trh1={Trh1?.ToString("dd.MM.yyyy")}");
		if (Trh2 is not null)
			sl.Add($@"Trh2={Trh2?.ToString("dd.MM.yyyy")}");

		string url;
		if (sl.Count == 0)
			url = $"/ordactive/0/all";
		else
			url = $"/ordactive/0/{String.Join('&', sl)}";

		url = $"{url}&{DateTime.Now.Ticks}";    // Parametre değiştiğini force etmek için

		navigationManager.NavigateTo(url);

	}
	private void Add2List(List<string> slst, List<SelList> lst, string name)
	{
		List<string> sl = new();
		foreach (var itm in lst)
		{
			if (itm.Selected)
			{
				// sl.Add($"[{itm.Ad.Substring(itm.Ad.IndexOf('#') + 1)}]");
				sl.Add($"[{itm.Id}]");
			}
		}
		string x = String.Join("", sl);
		if (!String.IsNullOrWhiteSpace(x))
		{
			slst.Add($"{name}{x}");
		}
	}

	private void OnTimedEvent(Object? source, ElapsedEventArgs e)
	{
		cnt += 1;
		Read();
		//PosChanged();
		InvokeAsync(StateHasChanged);
	}

	private void Read()
	{
		using var conn = db.GetConnection();
		UDB = conn.QuerySingle<DashBoard>("UU_DASHBOARD", new { UsrId = my.Id }, commandType: CommandType.StoredProcedure);

	}

	protected override void OnInitialized()
	{
		Read();
		timer.Elapsed += OnTimedEvent;
		timer.AutoReset = true;
		timer.Enabled = true;

		Notifier.Notify += OnNotify;
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		// value.UsrId == AppState.UsrId -> Kendisi

		if (key == "UO")    // Updated Order
		{
			var li = DnmList.FindIndex(x => x == value.OOId);
			if (li != -1)
			{
				// Read OoRec
				//	Usr Servisi değiştiyse artık bunu göremiyebilir, Listeden çıkartmak gerek
				//  Full Refresh yapmak gerekibilir
				// DnmList[li] = OoRec
				DnmList.Sort((x, y) => x == y ? 0 : x > y ? 1 : -1);
			}
		}

		// if (key == "IO")
		// {
		// 	await InvokeAsync(() =>
		// 	{
		// 		var x = Array.IndexOf(value.OrdUsrs, AppState.UsrId); // returns -1 if not found
		// 		if (x != -1)
		// 		{
		// 			// Read OoRec
		// 			// DnmList.Add(ooRec)
		// 			// DnmList.Sort
		// 			dnm = value.FFId;
		// 			StateHasChanged();
		// 		}
		// 	});
		// }
	}

	public void Dispose()
	{
		timer.Dispose();
		Notifier.Notify -= OnNotify;
	}

	public static void Add2List(string val, List<SelList> list)
	{
		string[] stra = val.Split("|", StringSplitOptions.RemoveEmptyEntries);
		foreach (var itm in stra)
		{
			string[] sa = itm.Split("#", StringSplitOptions.RemoveEmptyEntries);
			list.Add(new SelList { Ad = sa[0], Id = sa[1], Selected = false });
		}
		// DB den sorted gelmiyor
		list.Sort((x, y) => String.Compare(x.Ad, y.Ad, null, CompareOptions.OrdinalIgnoreCase));
	}

	public sealed class DashBoard
	{
		public int OC;
		public int OP;
		public int SR;
		public int SB;
		public int SG;
		public int FR;
		public int FB;
		public int FG;
		public int OnV;
		public int MnV;

		public List<SelList> reqList = new();
		public List<SelList> srvList = new();
		public List<SelList> actList = new();
		public List<SelList> tskList = new();

		public string? Reqs
		{
			set { Add2List(value, reqList); }
		}
		public string? Srvs
		{
			set { Add2List(value, srvList); }
		}
		public string? Acts
		{
			set { Add2List(value, actList); }
		}
		public string? Tsks
		{
			set { Add2List(value, tskList); }
		}

		public DateTime LastUpd;
		public string Info => LastUpd.ToString("dd.MM.yy HH:mm");
	}

	public sealed class SelList
	{
		public string Ad;
		public string Id;
		public bool Selected;
	}
}
