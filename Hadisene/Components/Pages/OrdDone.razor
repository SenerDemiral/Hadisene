@page "/orddone"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState my
@inject IDbCon db
@inject IModalService Modal


<table>
	<caption>
		<div style="display:inline-flex; gap:1rem">
			<h3>💤 Arşiv @stu</h3>
			<button style="border:none;background-color:yellow"
					popovertarget="search-popover"
					popovertargetaction="toggle">
				<span class="material-symbols-outlined">search</span>
			</button>
		</div>
	</caption>
	<thead>
		<tr>
			<th rowspan="2">Id#</th>
			<th rowspan="2">Servis</th>
			<th rowspan="2">Görev</th>
			<th rowspan="2">Görevli</th>
			<th rowspan="2">İsteyen</th>
			<th rowspan="2">Rf1</th>
			<th rowspan="2">Rf2</th>
			<th colspan="3">Başlangıç</th>
			<th colspan="3">Bitiş</th>
			<th rowspan="2">
				<span class="material-symbols-outlined">watch_check</span>
			</th>
		</tr>
		<tr>
			<th>İstek</th>
			<th>
				<span class="material-symbols-outlined">width</span>
			</th>
			<th>Gerçek</th>
			<th>İstek</th>
			<th>
				<span class="material-symbols-outlined">width</span>
			</th>
			<th>Gerçek</th>
		</tr>
	</thead>
	<tbody class="zebra">
		@foreach (var r in ozList)
		{
			<tr>
				<td class="ta-r">@r.OOId</td>
				<td>@r.SbjAd</td>
				<td>@r.TskAd</td>
				<td>@r.ActAd</td>
				<td>@r.ReqAd</td>
				<td>@r.Rf1</td>
				<td>@r.Rf2</td>
				<td class="ta-c">@r.RSDf</td>
				<td class="ta-c">@r.DSH</td>
				<td class="ta-c">@r.ASDf</td>
				<td class="ta-c">@r.RFDf</td>
				<td class="ta-c">@r.DFH</td>
				<td class="ta-c">@r.AFDf</td>
				<td class="ta-c">@r.SFH</td>
			</tr>
		}
	</tbody>
</table>

<div style="width: 360px; margin: 1rem auto;">
	<table>
		<tbody>
			<tr>
				<td>Toplam Talep</td>
				<td>@ozs1.CntRec</td>
			</tr>
			<tr>
				<td>Kapanmış Talep</td>
				<td>@ozs1.CntSFH</td>
			</tr>
			<tr>
				<td>Toplam Süre (S)</td>
				<td>@ozs1.SumSFH</td>
			</tr>
			<tr>
				<td>Min Süre (S)</td>
				<td>@ozs1.MinSFH</td>
			</tr>
			<tr>
				<td>Avg Süre (S)</td>
				<td>@ozs1.AvgSFH</td>
			</tr>
			<tr>
				<td>Max Süre (S)</td>
				<td>@ozs1.MaxSFH</td>
			</tr>
			<tr>
				<td>İlk Başlama</td>
				<td>@ozs1.MinASD</td>
			</tr>
			<tr>
				<td>Son Başlama</td>
				<td>@ozs1.MaxASD</td>
			</tr>
			<tr>
				<td>İlk Bitirme</td>
				<td>@ozs1.MinAFD</td>
			</tr>
			<tr>
				<td>Son Bitirme</td>
				<td>@ozs1.MaxAFD</td>
			</tr>
		</tbody>

	</table>
</div>

<div id="search-popover" popover="auto" style="min-width:360px;">
	<table>
		<tr>
			<td>Durum</td>
			<td>
				<div style="display:flex; gap:1rem;">
					<InputRadioGroup @bind-Value="stu">
						<div>
							<InputRadio Value="Statu.Kapalı" />
							@Statu.Kapalı
						</div>
						<div>
							<InputRadio Value="Statu.İptal" />
							@Statu.İptal
						</div>
					</InputRadioGroup>
				</div>
			</td>
		</tr>
		<tr>
			<td>Tarih &ge;</td>
			<td><input type="date" @bind-value="bTrh" /></td>
		</tr>
		<tr>
			<td>Tarih &lt;</td>
			<td><input type="date" @bind-value="eTrh" /></td>

		</tr>
		<tr>
			<td>Ref1</td>
			<td>
				<input type="text" maxlength="20" class="refs"
					   @bind="Rf1"
					   @bind:after="(() => Rf1 = Rf1.toASCIIqry())" />
			</td>
		</tr>
		<tr>
			<td>Ref2</td>
			@* <td><input type="text" @bind="Rf2.toASCII()"  /></td> *@
			@* <td><input type="text" @bind="Rf2" @bind:after="(() => Rf2.RefIncrement(ref Rf2))" /></td> *@
			<td>
				<input type="text" maxlength="20" class="refs"
					   @bind="Rf2"
					   @bind:after="(() => Rf2 = Rf2.toASCIIqry())" />
			</td>
		</tr>
		<tr>
			<td>Servis</td>
			<td>
				<div class="lst">
					@foreach (var itm in sbjList)
					{
						<div>
							<input type="checkbox" @bind-value="itm.Selected" /> @itm.Ad
						</div>
					}
				</div>
			</td>
		</tr>
		<tr>
			<td>Görev</td>
			<td>
				<div class="lst">
					@foreach (var itm in tskList)
					{
						<div>
							<input type="checkbox" @bind-value="itm.Selected" /> @itm.Ad
						</div>
					}
				</div>
			</td>
		</tr>
		<tr>
			<td>Görevli</td>
			<td>
				<div class="lst">
					@foreach (var itm in actList)
					{
						<div>
							<input type="checkbox" @bind-value="itm.Selected" /> @itm.Ad
						</div>
					}
				</div>
			</td>
		</tr>
		<tr>
			<td>İsteyen</td>
			<td>
				<div class="lst">
					@foreach (var itm in reqList)
					{
						<div>
							<input type="checkbox" @bind-value="itm.Selected" /> @itm.Ad
						</div>
					}
				</div>
			</td>
		</tr>
		<tr>
			<td colspan="2" class="ta-c">
				<button @onclick="DoSearch">
					<span class="material-symbols-outlined">search</span>
				</button>
			</td>
		</tr>
	</table>
</div>

<style>
	#search-popover {
		white-space: nowrap;
	}

	.lst {
		max-height: 80px;
		overflow: auto;
	}
	/* [popover]:popover-open {
						white-space: nowrap;
					} */
</style>

@code {
	private List<OZ>? ozList = new();
	private OZS1 ozs1 = new();
	public string? qryStr { get; set; } = "";
	public List<SelList> reqList = new();
	public List<SelList> sbjList = new();
	public List<SelList> actList = new();
	public List<SelList> tskList = new();

	private DateTime bTrh = DateTime.Today.AddDays(-7);
	private DateTime eTrh = DateTime.Today;
	private string? Rf1;
	private string? Rf2;

	public enum Statu { İptal = 'X', Kapalı = 'Z' };
	public Statu stu;

	private void DoSearch()
	{
		List<string> sl = new();

		Add2List(sl, reqList, "ReqId=");
		Add2List(sl, sbjList, "SbjId=");
		Add2List(sl, actList, "ActId=");
		Add2List(sl, tskList, "TskId=");

		if (!string.IsNullOrEmpty(Rf1))
		{
			sl.Add($"Rf1={Rf1}");
		}
		if (!string.IsNullOrEmpty(Rf2))
		{
			sl.Add($"Rf2={Rf2}");
		}

		qryStr = String.Join('&', sl);
		Read();
	}

	private void Add2List(List<string> slst, List<SelList> lst, string name)
	{
		List<string> sl = new();
		foreach (var itm in lst)
		{
			if (itm.Selected)
			{
				sl.Add($"[{itm.Ad.Substring(itm.Ad.IndexOf('#') + 1)}]");
			}
		}
		string x = String.Join("", sl);
		if (!String.IsNullOrWhiteSpace(x))
		{
			slst.Add($"{name}{x}");
		}
	}

	private void Read()
	{
		var Stu = ((char)((int)stu)).ToString();

		using var conn = db.GetConnection();
		ozList = conn.Query<OZ>("select * from OZ_QRY(@UsrId, @FFId, @Stu, @bTrh, @eTrh, @QryStr)",
			new { UsrId = my.Id, FFId = my.FrmId, Stu = Stu, bTrh = bTrh, eTrh = eTrh, QryStr = qryStr },
			commandType: CommandType.Text)
		.ToList();

		ozs1 = conn.QuerySingle<OZS1>("select * from OZ_STAT_1(@UsrId, @FFId, @Stu, @bTrh, @eTrh, @QryStr)",
			new { UsrId = my.Id, FFId = my.FrmId, Stu = Stu, bTrh = bTrh, eTrh = eTrh, QryStr = qryStr },
			commandType: CommandType.Text);

	}

	protected override async Task OnInitializedAsync()
	{
		stu = Statu.Kapalı;
		try
		{
			Read();
			using var conn = db.GetConnection();

			//ooList = ooList.OrderBy(x => x.Idx).ThenByDescending(y => y.UpdTS).ToList();

			var LU = conn.QuerySingle<LookUp>("OZ_LU", new { FormFile = my.FrmId }, commandType: CommandType.StoredProcedure);
			LookUpInit(LU.Sbjs, LU.Tsks, LU.Usrs);
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public sealed class OZ
	{
		public int OOId;
		public DateTime? RSD;
		public DateTime? ASD;
		public DateTime? RFD;
		public DateTime? AFD;

		public string? SbjAd;
		public string? TskAd;
		public string? ActAd;
		public string? ReqAd;

		public string? Rf1;
		public string? Rf2;

		public int DSH;
		public int DFH;
		public int SFH;

		public string? RSDf => RSD?.ToString("dd.MM.yy HH:mm");
		public string? RFDf => RFD?.ToString("dd.MM.yy HH:mm");
		public string? ASDf => ASD?.ToString("dd.MM.yy HH:mm");
		public string? AFDf => AFD?.ToString("dd.MM.yy HH:mm");
	}

	public sealed class OZS1
	{
		public int CntRec;
		public int CntSFH;
		public int SumSFH;
		public int MinSFH;
		public int AvgSFH;
		public int MaxSFH;
		public DateTime? MinASD;
		public DateTime? MaxASD;
		public DateTime? MinAFD;
		public DateTime? MaxAFD;
	}

	public sealed class LookUp
	{
		public string Sbjs;
		public string Tsks;
		public string Usrs;
	}

	public void LookUpInit(string Sbjs, string Tsks, string Usrs)
	{
		foreach (var s in Sbjs.Split(",", StringSplitOptions.TrimEntries))
		{
			sbjList.Add(new SelList { Ad = s, Selected = false });
		}
		foreach (var s in Tsks.Split(",", StringSplitOptions.TrimEntries))
		{
			tskList.Add(new SelList { Ad = s, Selected = false });
		}
		foreach (var s in Usrs.Split(",", StringSplitOptions.TrimEntries))
		{
			actList.Add(new SelList { Ad = s, Selected = false });
			reqList.Add(new SelList { Ad = s, Selected = false });
		}
	}
	public sealed class SelList
	{
		public string Ad;
		public bool Selected;
	}

}
