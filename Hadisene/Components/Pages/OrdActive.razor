@page "/ordactive"
@page "/ordactive/{qryStr}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState appState
@inject NavigationManager navigationManager
@inject IDbCon db
@inject IModalService Modal
@inject IToastService toastService
@inject NotifierService Notifier
@inject IJSRuntime js
@implements IDisposable
@using Hadisene.Components

<PageTitle>AktifTalepler</PageTitle>

<div class="stk">
	<button @onclick="Read" style="background-color: yellow;">
		<span class="material-symbols-outlined">
			refresh
		</span>
	</button>
	<button @onclick="AddNew" style="background-color: yellow;">
		<span class="material-symbols-outlined">
			add
		</span>
	</button>

	@* <button @onclick="@(async () => await js.InvokeVoidAsync("showDialogModal", "ooSrchDlg"))">
	<span class="material-symbols-outlined">
	search
	</span>
	</button> *@
</div>

<dialog id="ooSrchDlg">
	<p>Greetings, one and all!</p>
	<form method="dialog">
		<button>OK</button>
		<button @onclick="@(async ()=> await js.InvokeVoidAsync("closeDialog", "ooSrchDlg"))">Cancel</button>
	</form>
</dialog>


@if (ooList != null)
{
	<div class="ooCnt">
		@foreach (OO rec in ooList)
		{
			<div id="mypopover-@rec.OOId" popover="auto">@rec.Inf</div>

			<div class="ooCard" data-Ytk="@appState.UsrYtk" data-Act="@(rec.ActId == appState.UsrId)"
				 data-Stu="@rec.Stu" data-CS="@rec.CS" data-CF="@rec.CF"
				 data-IoC="@rec.IoC" data-SoF="@rec.SoF">
				<div class="ooHdr">
					<button class="ooBtnEdt" @onclick="@(() => ShowEdit(rec))">
						<span>@((MarkupString)rec.UpdFlg)</span>
						<span class="material-symbols-outlined">settings</span>
						<span class="ooBtnEdtId">#@rec.OOId</span>
					</button>
					<div class="ooHdrTxt">@rec.SbjAd</div>
					<button class="ooBtnMsj" @onclick="@(() => ShowMsg(rec))">
						<span class="ooBtnMsjCnt">@rec.MnVcF</span>
						<span class="material-symbols-outlined">chat</span>
					</button>
				</div>
				<div class="box ooReq">@rec.ReqAd</div>

				<button class="ooPin" data-Pin="@rec.Pin" @onclick="@(() => PinTgl(rec))"></button>
				<button class="ooCID"
						disabled=@(rec.CId == 0)
						@onclick="@(() => Chained(rec))"></button>


				@* <div class="box ooSbj">@rec.SbjAd</div> *@
				<div class="box ooTsk">@rec.TskAd</div>
				<div class="box ooInf">
					<button class="pop-btn"
							popovertarget="mypopover-@rec.OOId"
							popovertargetaction="toggle">
						<span>@rec.Inf</span>
					</button>
				</div>

				<div class="box ooAct">@rec.ActAd</div>

				<div class="box ooS ooRSD">@rec.RSD.ToS()</div>
				<div class="box ooS ooASD">@rec.ASD.ToS()</div>
				<div class="box ooS ooDSH ooOzet">@((MarkupString)rec.DSX)</div>

				<div class="box ooF ooRFD">@rec.RFD.ToS()</div>
				<div class="box ooF ooAFD">@rec.AFD.ToS()</div>
				<div class="box ooF ooDFH ooOzet">@rec.DFX</div>
				<div class="ooFtr">
					<div class="ooStuZ">KAPANDI</div>
					<div class="ooStuX">İ P T A L</div>
					@{
						// bool dsb = rec.ActId != appState.UsrId && appState.UsrYtk != 3;
						bool dsb = !rec.OrdUsrSet.Contains(rec.ActId) || appState.UsrYtk != 3;
					}
					<button class="ooStuA ooI ooBtnS" disabled="@dsb" @onclick="@(() => Baslat(rec))">Başlat</button>
					<button class="ooStuA ooI ooBtnF" disabled="@dsb" @onclick="@(() => Bitir(rec))">Bitir</button>

					<button class="ooStuA ooC ooBtnOK" @onclick="@(() => Ok(rec))">OK</button>
					<div class="ooStuA ooC ooTxtS">Başlat ?</div>
					<div class="ooStuA ooC ooTxtF">Bitir ?</div>
					<button class="ooStuA ooC ooBtnCancel" @onclick="@(() => Cancel(rec))">İptal</button>
				</div>
			</div>
		}
	</div>
}


@code {
	[Parameter]
	public string? qryStr { get; set; } = "";
	private List<OO>? ooList;
	private bool MsgShowing;

	// /ordopen?filter=scifi%20stars&page=3&star=LeVar%20Burton&star=Gary%20Oldman
	// The Filter property resolves to scifi stars.
	// The Page property resolves to 3.
	// The Stars array is filled from query parameters named star(Name = "star") and resolves to LeVar Burton and Gary Oldman.
	// https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-8.0
	// [SupplyParameterFromQuery]
	// public string? Filter { get; set; }
	// [SupplyParameterFromQuery]
	// public int? Page { get; set; }
	// [SupplyParameterFromQuery(Name = "star")]
	// public string[]? Stars { get; set; }

	private bool hasWaitConfirm()
	{
		return ooList!.Exists((z) => z.IoC == "C");
	}

	private void AddNew()
	{
		ModalParameters mp = new();
		mp.Add("OOId", 0);

		Modal.Show<OrdEdit>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});
	}

	private async Task ShowEdit(OO oo)
	{
		ModalParameters mp = new();
		mp.Add("OOId", oo.OOId);

		var x = Modal.Show<OrdEdit>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});

		var r = await x.Result;
		if (r.Confirmed)
		{
			//await Read();
		}
	}

	private async Task ShowMsg(OO oo)
	{
		if (!oo.OrdUsrSet.Contains(appState.UsrId))
		{
			Modal.Show<ModalConfirm>("Yetkili değilsiniz");
			return;
		}

		MsgShowing = true;
		oo.MnVc = 0;

		ModalParameters mp = new();
		mp.Add("OOId", oo.OOId);

		var x = Modal.Show<OrdMsg>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});

		var r = await x.Result;
		MsgShowing = false;
	}

	private async Task Chained(OO oo)
	{
		if (oo.CId > 0)
		{
			ModalParameters mp = new();
			mp.Add("qryStr", $"CId={oo.CId}");

			var x = Modal.Show<OrdActive>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});


			//await Read();
			//navigationManager.NavigateTo($"/ordactive/CId={oo.CId}");
		}
	}

	private void PinTgl(OO oo)
	{
		toastService.ShowInfo("Yeni Talep eklendi");

		try
		{
			using var conn = db.GetConnection();
			var x = conn.ExecuteScalar("OU_PIN_TGL", new { a = appState.UsrId, b = oo.OOId });
			oo.Pin = (int)x;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}
	private void Baslat(OO oo)
	{
		oo.IoC = "C";
		oo.SoF = "S";
	}
	private void Bitir(OO oo)
	{
		oo.IoC = "C";
		oo.SoF = "F";
	}
	private async Task Ok(OO oo)
	{
		try
		{
			using var conn = db.GetConnection();
			var res = conn.QuerySingle("OO_UPD_ACTUALDATES", new { a = appState.UsrId, b = oo.OOId, c = oo.SoF });

			oo.ASD = res.ASD;
			oo.AFD = res.AFD;
			oo.CS = res.CS;
			oo.CF = res.CF;
			oo.DSX = res.DSX;
			oo.DFX = res.DFX;
			oo.ActId = res.ACTID;
			oo.ActAd = res.ACTAD;

			oo.IoC = "I";

			await Notifier.Invoke("UO", new NotifyArgs
				{
					UUId = appState.UsrId,
					OOId = oo.OOId,
				});
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}
	private void Cancel(OO oo)
	{
		oo.IoC = "I";
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();
	}

	private async Task Read()
	{
		//qryStr = qryStr == "x" ? "" : qryStr;   // Boş ise x gönder
		qryStr = qryStr ?? "";   // coalesce(qryStr,'')
		try
		{
			using var conn = db.GetConnection();
			ooList = (await conn.QueryAsync<OO>("select * from OO_QRY(@UsrId, @QryStr) order by Idx, Trh",
				new { UsrId = appState.UsrId, QryStr = qryStr }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.Text)
			).ToList();

			//ooList = ooList.OrderBy(x => x.Idx).ThenByDescending(y => y.UpdTS).ToList();

			Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		// if (value.UUId != appState.UsrId &&
		if (
			value.FFId == appState.UsrFrmId &&
			value.OrdUsrSet.Contains(appState.UsrId))
		{
			if (key == "IM" && !MsgShowing)
			{
				int iof = ooList!.FindIndex(x => x.OOId == value.OOId);
				if (iof != -1)
				{
					ooList[iof].MnVc++;

					await InvokeAsync(() =>
					{
						StateHasChanged();
					});

					toastService.ShowInfo($"Yeni Mesaj var #{value.OOId}");
				}
			}
			else if (key == "IO")
			{
				toastService.ShowInfo($"Yeni Talep eklendi #{value.OOId}");
			}
			else if (key == "UO")
			{
				// İlgili kaydı bul
				int iof = ooList!.FindIndex(x => x.OOId == value.OOId);
				if (iof != -1)
				{
					using var conn = db.GetConnection();
					var x = conn.QuerySingle<OO>("OO_QRY",
						new { A = appState.UsrId, B = qryStr, p3 = value.OOId }, // SP parametreleri DB deki sırasıyla gönderilmeli
						commandType: CommandType.StoredProcedure);

					ooList[iof] = x;

					await InvokeAsync(() =>
					{
						StateHasChanged();
					});

					if (value.UUId != appState.UsrId)
						toastService.ShowInfo($"Talepte değişiklik #{value.OOId}");
				}

			}
		}
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

}
