@page "/ordactive/{CId:int}/{qryStr}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager navigationManager
@inject AppState my
@inject IDbCon db
@inject IModalService Modal
@inject IToastService toastService
@inject NotifierService Notifier
@inject IJSRuntime js
@implements IDisposable
@using Hadisene.Components

<PageTitle>AktifTalepler</PageTitle>

<div class="stk">
	<button @onclick="Refresh" style="background-color: yellow;">
		<span class="material-symbols-outlined">refresh</span>
	</button>
	<div>@PgeHdr</div>
	<button @onclick="AddNew" style="background-color: yellow;">
		<span class="material-symbols-outlined">add</span>
	</button>
</div>

<dialog id="ooSrchDlg">
	<p>Greetings, one and all!</p>
	<form method="dialog">
		<button>OK</button>
		<button @onclick="@(async ()=> await js.InvokeVoidAsync("closeDialog", "ooSrchDlg"))">Cancel</button>
	</form>
</dialog>


@if (ooList != null)
{
	<div class="ooCnt">
		@foreach (OO rec in ooList)
		{
			<div id="mypopover-@rec.OOId" popover="auto">
				<div>
					<div class="ooRf1">@rec.Rf1</div>
					<div class="ooRf2">@rec.Rf2</div>
				</div>
				<p>@rec.Inf</p>
			</div>

			<div class="ooCard" data-Ytk="@my.Ytk" data-Act=@(rec.ActId == my.Id)
				 data-Stu="@rec.Stu" data-CS="@rec.CS" data-CF="@rec.CF"
				 data-IoC="@rec.IoC" data-SoF="@rec.SoF" @key=rec.OOId>

				<div class="ooHdr">
					<div class="tooltip">
						<button class="ooBtnEdt" @onclick="@(() => ShowEdit(rec))">
							<span>@((MarkupString)rec.UpdFlg)</span>
							<span class="material-symbols-outlined">settings</span>
							@* <div class="ooBtnEdtId">&nbsp;&bull;@rec.OOId.toSqid()</div> *@
						</button>
						<span class="tooltiptext">edit</span>
					</div>

					<div class="ooHdrTxt">
						<div class="ooSbj">
							@rec.SbjAd.Coalesce()
						</div>
						<div class="ooAct">
							@rec.ActAd.Coalesce()
						</div>
					</div>

					<div class="tooltip">
						<button class="ooBtnMsj" @onclick="@(() => ShowMsg(rec))">
							<span class="ooBtnMsjCnt">@rec.MnVcF</span>
							<span class="material-symbols-outlined">chat</span>
						</button>
						<span class="tooltiptext">chat</span>
					</div>
				</div>

				<div class="box ooTbl">
					<table>
						<tr>
							<td colspan="4">
								<div class="btnGrp">
									<div class="tooltip">
										<div class="ooId">#@rec.OOId.toSqid()</div>
										<span class="tooltiptext">talep id</span>
									</div>

									<div class="tooltip">
										<button class="ooBtnInf" disabled="@rec.noInf"
												@onclick="@(() => ShowInf(rec))">
											<span class="material-symbols-outlined">info</span>
										</button>
										<span class="tooltiptext">açıklama</span>
									</div>

									<div class="tooltip">
										<button class="ooBtnOVTS"
												@onclick="@(() => ShowOVTS(rec))">
											<span class="material-symbols-outlined">visibility</span>
										</button>
										<span class="tooltiptext">görülme zamanları</span>
									</div>

									<div class="tooltip">
										<button class="ooOk"
												@onclick="@(() => OrdViewUpd(rec))">
											<span class="material-symbols-outlined">check</span>
										</button>
										<span class="tooltiptext">gördüm</span>
									</div>

									<div class="tooltip">
										<button class="ooPin"
												data-Pin="@rec.Pin"
												@onclick="@(() => PinTgl(rec))">
										</button>
										<span class="tooltiptext">pin</span>
									</div>

									<div class="tooltip">
										<button class="ooCID"
												disabled=@(rec.CId == 0)
												@onclick="@(() => Chained(rec))">
										</button>
										<span class="tooltiptext">link</span>
									</div>
								</div>
							</td>
						</tr>

						<tr>
							@* <th style="font-size:.6rem;color: var(--l-color);font-family: monospace;width:10%;">görev</th> *@
							@* <th class="ta-c" style="width:10%;"><span class="material-symbols-outlined" style="font-size:20px;vertical-align: inherit;">contract_edit</span></th> *@
							<td class="ta-c">
								<div class="tooltip">
									<span class="material-symbols-outlined">subject</span>
									<span class="tooltiptext">konu</span>
								</div>
							</td>
							<td colspan="3" class="ooTsk">@rec.TskAd</td>
						</tr>
						<tr>
							<td class="ta-c">
								<div class="tooltip">
									<span class="material-symbols-outlined">call_made</span>
									<span class="tooltiptext">isteyen</span>
								</div>
							</td>
							<td colspan="3" class="ooReq">@rec.ReqAd</td>
						</tr>

						<tr style="font-size:.6rem;color: var(--l-color);font-family: monospace;">
							<th class="ta-c"></th>
							<th>planlanan</th>
							<th>gerçekleşen</th>
							<th>± sapma</th>
						</tr>
						<tr class="ooS">
							<td class="ta-c">
								<div class="tooltip">
									<span class="material-symbols-outlined" style="font-size:20px;vertical-align: inherit;">play_circle</span>
									<span class="tooltiptext">başlangıç</span>
								</div>
							</td>
							<td>@rec.RSD.ToS()</td>
							<td>@rec.ASD.ToS()</td>
							<td class="ta-c">@((MarkupString)rec.DSX)</td>
						</tr>
						<tr class="ooF">
							<td class="ta-c">
								<div class="tooltip">
									<span class="material-symbols-outlined" style="font-size:20px;vertical-align: inherit;">stop_circle</span>
									<span class="tooltiptext">bitiş</span>
								</div>
							</td>
							<td>@rec.RFD.ToS()</td>
							<td>@rec.AFD.ToS()</td>
							<td class="ta-c">@((MarkupString)rec.DFX)</td>
						</tr>
					</table>
				</div>

				<div class="ooFtr">
					<div class="ooStuZ">KAPANDI</div>
					<div class="ooStuX">İ P T A L</div>
					@{
						// ActId = 0 Belirsiz olabilir, Bu servisteki Aktorlerden biri başlatabilir ve kendisi Act olur
						// Act kendisiyse veya Kendi bir Actor ve OrdUsrlarından biri kendisi ise
						bool dsb = !(rec.ActId == my.Id || (my.Ytk == 4 && rec.OrdUsrSet.Contains(my.Id)));
					}
					<button class="ooStuA ooI ooBtnS" disabled="@dsb" @onclick="@(() => Baslat(rec))">Başlat</button>
					<button class="ooStuA ooI ooBtnF" disabled="@dsb" @onclick="@(() => Bitir(rec))">Bitir</button>

					<button class="ooStuA ooC ooBtnOK" @onclick="@(() => Ok(rec))">OK</button>
					<div class="ooStuA ooC ooTxtS">Başlat ?</div>
					<div class="ooStuA ooC ooTxtF">Bitir ?</div>
					<button class="ooStuA ooC ooBtnCancel" @onclick="@(() => Cancel(rec))">İptal</button>
				</div>
			</div>
		}
	</div>
}


@code {
	[Parameter]
	public int CId { get; set; }
	[Parameter]
	public string? qryStr { get; set; } = "";
	[Parameter]
	public string? PgeHdr { get; set; } = "";
	private List<OO>? ooList;
	private bool MsgShowing;

	// /ordopen?filter=scifi%20stars&page=3&star=LeVar%20Burton&star=Gary%20Oldman
	// The Filter property resolves to scifi stars.
	// The Page property resolves to 3.
	// The Stars array is filled from query parameters named star(Name = "star") and resolves to LeVar Burton and Gary Oldman.
	// https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-8.0
	// [SupplyParameterFromQuery]
	// public string? Filter { get; set; }
	// [SupplyParameterFromQuery]
	// public int? Page { get; set; }
	// [SupplyParameterFromQuery(Name = "star")]
	// public string[]? Stars { get; set; }

	private bool hasWaitConfirm()
	{
		return ooList!.Exists((z) => z.IoC == "C");
	}

	private void AddNew()
	{
		ModalParameters mp = new();
		mp.Add("OOId", 0);

		Modal.Show<OrdEdit>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});
	}

	private async Task ShowOVTS(OO oo)
	{
		ModalParameters mp = new();
		mp.Add("OOId", oo.OOId);

		Modal.Show<OrdVTS>("OVTS", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Large,
					Position = ModalPosition.Middle
				});

		OrdViewUpd(oo);
	}

	private async Task ShowInf(OO oo)
	{
		try
		{
			await js.InvokeVoidAsync("showPopover", $"mypopover-{oo.OOId}");
		}
		catch (JSDisconnectedException) { }
		OrdViewUpd(oo);
	}
	private async Task ShowEdit(OO oo)
	{
		ModalParameters mp = new();
		mp.Add("OOId", oo.OOId);

		var x = Modal.Show<OrdEdit>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});

		var r = await x.Result;
		if (r.Confirmed)
		{
			//await Read();
		}

		OrdViewUpd(oo);
	}

	private async Task ShowMsg(OO oo)
	{
		if (!oo.OrdUsrSet.Contains(my.Id))
		{
			Modal.Show<ModalConfirm>("Yetkili değilsiniz");
			return;
		}

		MsgShowing = true;
		oo.MnVc = 0;

		ModalParameters mp = new();
		mp.Add("OOId", oo.OOId);

		var x = Modal.Show<OrdMsg>("deneme", mp,
			new ModalOptions
				{
					HideHeader = true,
					Size = ModalSize.Custom,
					SizeCustomClass = "blazored-modal-custom-size",
					Position = ModalPosition.Middle
				});

		var r = await x.Result;
		MsgShowing = false;

		OrdViewUpd(oo);
	}

	private async Task Chained(OO oo)
	{
		if (oo.CId > 0)
		{
			// ModalParameters mp = new();
			// mp.Add("qryStr", $"CId={oo.CId}");
			// mp.Add("PgeHdr", "Bağlı Talepler");

			// var x = Modal.Show<OrdActive>("deneme", mp,
			// new ModalOptions
			// 	{
			// 		HideHeader = true,
			// 		Size = ModalSize.Custom,
			// 		SizeCustomClass = "blazored-modal-custom-size",
			// 		Position = ModalPosition.Middle
			// 	});


			//await Read();
			OrdViewUpd(oo);

			navigationManager.NavigateTo($"/ordactive/{oo.CId}/all");
		}
	}

	private void OrdViewUpd(OO oo)
	{
		try
		{
			using var conn = db.GetConnection();
			var x = conn.ExecuteScalar("OU_OVTS_UPD", new { a = my.Id, b = oo.OOId });
			oo.UpdFlg = "";
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}

	}

	private void PinTgl(OO oo)
	{
		//toastService.ShowInfo("Yeni Talep eklendi");

		try
		{
			using var conn = db.GetConnection();
			var x = conn.ExecuteScalar("OU_PIN_TGL", new { a = my.Id, b = oo.OOId });
			oo.Pin = (int)x;
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}

		OrdViewUpd(oo);
	}
	private void Baslat(OO oo)
	{
		oo.IoC = "C";
		oo.SoF = "S";

	}
	private void Bitir(OO oo)
	{
		oo.IoC = "C";
		oo.SoF = "F";

	}
	private async Task Ok(OO oo)
	{
		try
		{
			using var conn = db.GetConnection();
			var res = conn.QuerySingle("OO_UPD_ACTUALDATES", new { a = my.Id, b = oo.OOId, c = oo.SoF });

			oo.ASD = res.ASD;
			oo.AFD = res.AFD;
			oo.CS = res.CS;
			oo.CF = res.CF;
			oo.DSX = res.DSX;
			oo.DFX = res.DFX;
			oo.ActId = res.ACTID;
			oo.ActAd = res.ACTAD;

			oo.IoC = "I";

			await Notifier.Invoke("UO", new NotifyArgs
				{
					FFId = my.FrmId,
					UUId = my.Id,
					OOId = oo.OOId,
				});
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}

		OrdViewUpd(oo);

	}
	private void Cancel(OO oo)
	{
		oo.IoC = "I";
	}

	protected override async Task OnInitializedAsync()
	{
		if (qryStr == "all")
			qryStr = "";
		if (CId > 0)
		{
			qryStr = $"CId={CId}";
		}

		PgeHdr = CId switch
		{
			0 => "Aktif Talepler",
			> 1 => "Bağlı Talepler",
			_ => "?",
		};

		Notifier.Notify += OnNotify;

		await Read();
	}
	private async Task Refresh()
	{
		await Read();
		StateHasChanged();
	}

	private async Task Read()
	{
		//qryStr = qryStr == "x" ? "" : qryStr;   // Boş ise x gönder
		qryStr = qryStr ?? "";   // coalesce(qryStr,'')
		try
		{
			using var conn = db.GetConnection();
			ooList = (await conn.QueryAsync<OO>("select * from OO_QRY(@UsrId, @QryStr) order by Idx, Trh",
				new { UsrId = my.Id, QryStr = qryStr }, // SP parametreleri DB deki sırasıyla gönderilmeli
				commandType: CommandType.Text)
			).ToList();

			//ooList = ooList.OrderBy(x => x.Idx).ThenByDescending(y => y.UpdTS).ToList();

		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	public async Task OnNotify(string key, NotifyArgs value)
	{
		if (value.FFId == my.FrmId)
		{
			if (key == "DO")    // Order Arşivlendi (Deleted)
			{
				int iof = ooList!.FindIndex(x => x.OOId == value.OOId);
				if (iof != -1)
				{
					ooList.RemoveAt(iof);
					await InvokeAsync(StateHasChanged);
					toastService.ShowInfo($"Talep Arşivlendi #{value.OOId.toSqid()}");
				}
			}
			else if (key == "IO")   // Insert
			{
				// İlgili kaydı bul
				using var conn = db.GetConnection();
				var x = conn.QuerySingle<OO>("OO_QRY",
					new { A = my.Id, B = qryStr, p3 = value.OOId },
					commandType: CommandType.StoredProcedure);

				ooList.Insert(0, x);

				await InvokeAsync(StateHasChanged);

				// toastService.ShowInfo($"Yeni Talep eklendi #{value.OOId.toSqid()}");

				// if (my.Id != value.UUId)
				// {
				// 	try
				// 	{
				// 		await js.InvokeVoidAsync("playSound01", "sound");
				// 	}
				// 	catch (JSDisconnectedException) { }
				// }
			}
			else
			{
				int iof = ooList!.FindIndex(x => x.OOId == value.OOId);
				//(value.CId == CId || value.OrdUsrSet.Contains(my.UsrId)))
				if (iof != -1)
				{
					if (key == "UO")
					{
						// İlgili kaydı bul
						using var conn = db.GetConnection();
						var x = conn.QuerySingleOrDefault<OO>("OO_QRY",
							new { A = my.Id, B = qryStr, p3 = value.OOId },
							commandType: CommandType.StoredProcedure);

						// Değişen Ord artık bu kişiyi ilgilendirmiyorsa kayıt gelmez
						if (x == null)
						{
							ooList.RemoveAt(iof);
							await InvokeAsync(StateHasChanged);
							toastService.ShowInfo($"Talep çıkartıldı #{value.OOId.toSqid()}");
						}
						else
						{
							ooList[iof] = x;
							await InvokeAsync(StateHasChanged);

							// await InvokeAsync(() => {
							// 	StateHasChanged();
							// });

							if (value.UUId != my.Id)    // Gönderen ben değilsem
								toastService.ShowInfo($"Talepte değişiklik #{value.OOId.toSqid()}");
						}
					}
					else if (key == "IM" && !MsgShowing)
					{
						ooList[iof].MnVc++;
						await InvokeAsync(StateHasChanged);
						toastService.ShowInfo($"Yeni Mesaj var #{value.OOId.toSqid()}");
					}
				}
			}
		}
	}

	public void Dispose()
	{
		Notifier.Notify -= OnNotify;
	}

}
