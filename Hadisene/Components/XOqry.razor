@using System.Text.Json
@page "/liste/{XXId:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AppState my
@inject IDbCon db
@inject IModalService Modal

<div style="display:inline-flex;justify-content:space-between;width:100%;position: sticky;
  top: 0;
  background-color: aqua;
  padding: 4px;">
	<button class="emoji" @onclick="AddMaster">➕➕</button>
	<button @onclick="Kaydet" data-changed="@hasChange">🆗 Kaydet @NOC</button>

	<div style="display:inline-flex;gap:4px;">
		<button disabled="@RunReadyDisabled" @onclick="RunReady">
			<span class="material-symbols-outlined">check</span>
		</button>
		<input type="date" min="@RunMinTrh" disabled="@RunDisabled" @bind="RunSTrh" />
		<button disabled="@RunDisabled" @onclick="RunOK">Run @RunCnt</button>
	</div>
</div>

@* <hr /> *@

@if (sl?.Count > 0)
{
	<div>
		<table style="table-layout:auto;width:auto">
			<thead>
				<tr>
					<th></th>
					<th>➕</th>
					<th>edit</th>
					<th>➖</th>
					<th>kimden</th>
					<th>konu</th>
					<th>grup</th>
					<th>kime</th>
					<th>±gün</th>
					<th>zaman</th>
					<th>süre(s)</th>
					<th>run</th>
					<th>±gün</th>
				</tr>
			</thead>
			@{
				int i = 0;
				int oldId = sl[0].mXOId;
			}
			@foreach (var s in sl)
			{
				int idx = i;

				@if (oldId != s.mXOId) //oldId != sl[i].mXOId
				{
					oldId = s.mXOId; //oldId = sl[i].mXOId

					<tr>
						<td colspan="20" class="td-blnk"></td>
					</tr>
				}

				<tr data-deleted="@s.isDeleted" data-root="@s.pXOId">
					<td>@s.XOId</td>
					@if (s.pXOId == 0)    //sl[i].pXOId == 0
					{
						<td><button class="emoji" @onclick="@(() => AddSlave(idx))">➕</button></td>
					}
					else
					{
						<td style="border-top-style: hidden;"></td>
					}
					<td>
						<button class="emoji" @onclick="@(() => ShowInp(s))" data-edit="@s.isEdited">✒️</button>

					</td>
					<td><button class="emoji" @onclick="@(() => SilToggle(idx))">➖</button></td>
					<td class="inp-txt">@s.ReqAd</td>
					<td class="inp-txt">@s.TskAd</td>
					<td class="inp-txt">@s.SrvAd</td>
					<td class="inp-txt">@s.ActAd</td>
					<td class="ta-c">@s.dGun</td>
					<td class="ta-c">@s.RSD.ToString("HH:mm")</td>
					<td class="ta-c">@s.RPH</td>
					<td>
						<input type="checkbox"
							   disabled="@(s.XOId < 0 ? true : false)"
							   @bind="s.isRun"
							   @onclick="(() => RunToggle(s))"
							   style="width:auto" />
					</td>
					@if (s.pXOId == 0)
					{
						<td></td>
					}
					else
					{
						<td><input type="number" style="width:56px" disabled="@(!s.isRun)" @bind:get="@s.Run_dGun" @bind:set="((x) => DGunChanged(x,s))" /></td>
						@* <td><input type="number" style="width:56px" disabled="@(!s.isRun)" @bind="@s.Run_dGun" @bind:after="@DGunChanged()" /></td> *@
					}
				</tr>

				i++;
			}
		</table>
	</div>
	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
}

<style>
	button[data-changed] {
		color: red;
	}

	button[data-edit] {
		background-color: aqua;
	}

	tr[data-deleted] {
		color: red;
	}

	tr[data-typ="D"] {
		color: red;
	}

	tr[data-root="0"] {
		/* font-weight: bold; */
		background-color: azure;
	}

	.td-blnk {
		height: 8px;
		/* background-color: aquamarine; */
	}

	th, td {
		/* border: none; */
	}

	.inp-txt {
		max-width: 20ch;
	}
	.emoji {
		font-size: 12px;
	}
</style>

@code {
	[Parameter] public int XXId { get; set; }
	List<XO> sl = new();
	private Dictionary<string, int>? ssd, uud, ttd, sad;
	private bool hasChange;
	private int NOC;
	private int RunCnt;
	private DateTime? RunMRSD;
	private DateTime? RunSTrh;
	private string? RunMinTrh;
	private bool RunDisabled = true;
	private bool RunReadyDisabled = true;

	int c = -1;

	private void ChangeCount()
	{
		//NOC = sl.Count((z) => z.isEdited || (z.XOId > 0 && z.isDeleted));

		NOC = sl.Count((z) =>
			(z.XOId > 0 && (z.isEdited || z.isDeleted)) ||
			(z.XOId <= 0 && z.isEdited && !z.isDeleted));

		hasChange = NOC > 0 ? true : false;
		RunReadyDisabled = hasChange;
		RunDisabled = hasChange;
	}

	public sealed class rXOI
	{
		public int r_CId;
		public int r_pOOId;
	}
	private void RunOK()
	{
		int idx = 0;
		Stack<int> myStack = new();
		foreach (var s in sl)
		{
			if (s.pXOId == 0)
				myStack.Push(idx);
			idx++;
		}

		using var conn = db.GetConnection();

		foreach (var p in myStack)
		{
			int CId = 0;
			int pOOId = 0;
			// Parent
			if (sl[p].isRun)
			{
				var r = conn.QuerySingle<rXOI>("XO_OO_INS", new
				{
					UsrId = my.Id,
					FFId = my.FrmId,
					sTrh = RunSTrh,
					XOId = sl[p].XOId,
					dGun = sl[p].Run_dGun,
					CId = -1,
					pOOId = 0
				}, commandType: CommandType.StoredProcedure);
				CId = r.r_CId;
				pOOId = r.r_pOOId;
			}

			int mId = sl[p].mXOId;
			int fi = p + 1;
			var li = sl.FindLastIndex((z) => z.mXOId == mId);
			// Child
			for (int y = fi; y <= li; y++)
			{
				if (sl[y].isRun)
				{
					conn.QuerySingle<rXOI>("XO_OO_INS", new
					{
						UsrId = my.Id,
						FFId = my.FrmId,
						sTrh = RunSTrh,
						XOId = sl[y].XOId,
						dGun = sl[y].Run_dGun,
						CId = CId,
						pOOId = pOOId
					}, commandType: CommandType.StoredProcedure);
				}
			}
		}
		//RunInit();
	}

	private void RunInit()
	{
		foreach (var s in sl)
		{
			if (s.isRun)
			{
				s.isRun = false;
				s.Run_dGun = s.dGun;
			}
		}
		RunCnt = 0;
	}
	private void RunReady()
	{
		int mindGun = 999;
		DateTime RSD = DateTime.MaxValue;
		foreach (var s in sl)
		{
			if (s.isRun && s.Run_dGun < mindGun)
			{
				mindGun = s.Run_dGun;
				RSD = s.RSD;
			}
		}
		if (DateTime.Now.AddMinutes(1) > RSD)
			RSD = RSD.AddDays(1);
		RSD = RSD.AddDays(Math.Abs(mindGun));

		RunMinTrh = RSD.ToString("yyyy-MM-dd");
		RunSTrh = RSD;
		RunDisabled = false;
	}
	private void DGunChanged(int v, XO s)
	{
		s.Run_dGun = v;
		RunDisabled = true;
	}
	private void RunToggle(XO s)
	{
		s.isRun = !s.isRun;
		if (s.pXOId == 0)
		{
			foreach (var z in sl.FindAll((x) => x.pXOId == s.XOId))
			{
				z.isRun = s.isRun;
			}

		}
		RunCnt = sl.Count((z) => z.isRun);
		RunReadyDisabled = RunCnt == 0 || hasChange;
	}

	public async Task ShowInp(XO s)
	{
		ModalParameters mp = new();
		var cs = s.ShallowCopy();

		mp.Add("xo", cs);
		mp.Add("ssd", ssd);
		// mp.Add("ttd", ttd);
		// mp.Add("XOId", s.XOId);

		var x = Modal.Show<XOinp>("", mp);

		var r = await x.Result;
		if (r.Confirmed)
		{
			s.isEdited = true;
			ChangeCount();

			s.dGun = cs.dGun;
			s.RPH = cs.RPH;
			s.RSD = cs.RSD;
			s.ReqId = cs.ReqId;
			s.ReqAd = cs.ReqAd;
			s.SrvId = cs.SrvId;
			s.SrvAd = cs.SrvAd;
			s.TskId = cs.TskId;
			s.TskAd = cs.TskAd;
			s.ActId = cs.ActId;
			s.ActAd = cs.ActAd;
			s.Inf = cs.Inf;
			s.Rf1 = cs.Rf1;
			s.Rf2 = cs.Rf2;
		}
	}

	private void Kaydet()
	{
		// Varsa Sil
		KaydetBeforeAfter(before: true);

		int oldPrnt = 0, newPrnt = 0, newId = 0;
		foreach (var s in sl)
		{
			// newId = WriteRec(s);
			// if (s.XOId < 0)
			// 	newId = d++;        // newId = XO_MDF
			// else
			// 	newId = s.XOId;

			//if (s.pXOId == 0 && s.XOId < 0)
			if (s.pXOId == 0)   // Parent
			{
				oldPrnt = s.XOId;
				newId = WriteRec(s);
				newPrnt = newId;
				s.XOId = newId;

			}
			else
			{
				s.pXOId = newPrnt;
				newId = WriteRec(s);
				s.XOId = newId;
			}
			//if (s.pXOId < 0 && oldPrnt == s.pXOId)


			// // Root and New
			// if (s.pXOId == 0 && s.XOId < 0)
			// 	//if (s.pXOId == 0 && s.XOId < 0)
			// {
			// 	oldId = s.XOId;
			// 	newId = d++;        // newId = XO_MDF
			// 	s.XOId = newId;
			// }

			// if(s.pXOId < 0 && oldId == s.pXOId)
			// {
			// 	s.pXOId = newId;
			// }

			s.isDeleted = false;
			s.isEdited = false;
		}

		KaydetBeforeAfter(before: false);
		ChangeCount();

	}
	private void KaydetBeforeAfter(bool before)
	{
		// Root Idx leri LIFO koy stack
		int idx = 0;
		Stack<int> myStack = new();

		foreach (var s in sl)
		{
			if (s.pXOId == 0)
				myStack.Push(idx);

			idx++;
		}

		foreach (var f in myStack)
		{
			if (before)
				KaydetBefore(f);
			else
				KaydetAfter(f);
		}
	}
	private void KaydetBefore(int ridx)
	{
		// Sadece root idx gelir
		// Child first/last index
		int mId = sl[ridx].mXOId;
		int fi = ridx;
		var li = sl.FindLastIndex((z) => z.mXOId == mId);
		if (sl[ridx].isDeleted)    // Delete Child then Root
		{
			// Slaveleri sil, eski/yeni farketmez (DB zaten silecek)
			for (int y = li; y > fi; y--)
			{
				sl.RemoveAt(y);
			}
			if (sl[ridx].XOId <= 0)  // Root Yeni ise sil, eskiyse kalsın DB silecek
			{
				sl.RemoveAt(ridx);
			}
		}
		else // Child, İçinde sil varsa, Root dışında
		{
			for (int y = li; y > fi; y--)
			{
				// Yeniyse sil, değilse bırak DB silecek
				if (sl[y].isDeleted && sl[y].XOId <= 0)
					sl.RemoveAt(y);
			}
		}
	}
	private void KaydetAfter(int ridx)
	{
		// Sadece root idx gelir
		// DB ile eşle, tekrar okumamak için

		// Childs
		int mId = sl[ridx].mXOId;
		int fi = ridx;
		var li = sl.FindLastIndex((z) => z.mXOId == mId);

		if (sl[ridx].isDeleted)    // Root
		{
			// Hepsini sil
			for (int y = li; y >= fi; y--)
			{
				sl.RemoveAt(y);
			}
		}
		else // İçinde sil varsa, Root dışında
		{
			for (int y = li; y > fi; y--)
			{
				if (sl[y].isDeleted)
					sl.RemoveAt(y);
			}
		}
	}
	private void SilToggle(int idx)
	{   // XOId < 0 ise yeni eklenmiş
		// pXOId = 0 ise Root
		sl[idx].isDeleted = !sl[idx].isDeleted;
		ChangeCount();


		// if (sl[idx].pXOId == 0) // Ana
		// {
		// 	// İçindeki sonradan eklenmişleri remove
		// 	// Diğerlerine Del flagı koy
		// 	// Veya sadece D koy belki vazgeçer,
		// 	// birdaha Del'e basarsa eski haline döndür
		// 	// Del toggle sadece Sel kayıtlarında olmalı
		// 	int mId = sl[idx].mXOId;
		// 	int fi = idx;
		// 	var li = sl.FindLastIndex((z) => z.mXOId == mId);
		// 	for (int y = li; y >= fi; y--)
		// 	{
		// 		if (sl[y].XOId < 0)
		// 			sl.RemoveAt(y);
		// 		else
		// 			sl[y].Typ = "D";
		// 	}
		// }
		// else
		// {
		// 	if (sl[idx].XOId < 0)
		// 		sl.RemoveAt(idx);
		// 	else
		// 		sl[idx].Typ = "D";

		// }

	}
	private void AddSlave(int idx)
	{
		XO x = new();
		x.Typ = "I";
		x.mXOId = sl[idx].mXOId;
		x.XOId = c;
		x.pXOId = sl[idx].XOId;

		sl.Insert(idx + 1, x);
		c--;

	}
	private void AddMaster()
	{
		sl.Add(new XO { Typ = "I", mXOId = c, XOId = c, pXOId = 0 });
		c--;
	}

	private int WriteRec(XO r)
	{
		// Buraya temiz kayıtlar gelir
		// XOId ye göre Ins/Upd DB de (Sadece D önemli)
		r.Typ = r.isDeleted ? "D" : "U";

		int newId = 0;
		try
		{
			using var conn = db.GetConnection();
			newId = conn.ExecuteScalar<int>("XO_MDF",
					new
					{
						p1 = my.Id,
						p2 = XXId,
						p3 = r.Typ,
						p4 = r.mXOId,
						p5 = r.XOId,
						p6 = r.pXOId,
						p7 = r.dGun,
						p8 = r.RSD,
						p9 = r.RPH,
						pa = r.ReqId,
						pc = r.SrvId,
						pb = r.TskId,
						pd = r.ActId,
						pe = r.Inf,
						pf = r.Rf1,
						pg = r.Rf2,
					},
					commandType: CommandType.StoredProcedure);

		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
		return newId;

	}
	private async Task Read()
	{
		try
		{
			using var conn = db.GetConnection();
			ssd = conn.Query<SS>("SS_LU", new { UsrId = my.Id, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);

			sl = (await conn.QueryAsync<XO>("XO_QRY",
				new { a = my.Id, b = XXId }, commandType: CommandType.StoredProcedure)
			).ToList();

			//Notifier.Notify += OnNotify;
		}
		catch (Exception ex)
		{
			ModalParameters mp = new();
			mp.Add("Message", ex.Message);
			Modal.Show<ModalWarning>("", mp);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Read();

		// using var conn = db.GetConnection();
		// ssd = conn.Query<SS>("SS_LU", new { UsrId = my.Id, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		// ttd = conn.Query<TT>("TT_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
	}


	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class TT
	{
		public int Id;
		public string Ad;
		public string? Inf;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}
}
