@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (rr != null && sad != null)
{
	<table style="min-width:340px;">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Periyodik Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<td>id#</td>
				<td>@Idf()</td>
			</tr>
			<tr>
				<td>ad</td>
				<td><input type="text" maxlength="30" @bind="rr!.Ad" /></td>
			</tr>
			<tr>
				<td>pasif</td>
				<td><input type="checkbox" @bind="rr.isPsf" style="width:auto" /></td>
			</tr>
			<tr>
				<td>period</td>
				<td>
					<select @bind="rr.Prd" style="width:100%;">
						<option value="1">Yıllık</option>
						<option value="2">Aylık</option>
						<option value="3">Haftalık</option>
						<option value="4">Günlük</option>
						}
					</select>
				</td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">sonraki planlanan başlangıç</td>
			</tr>
			<tr>
				<td>tarih</td>
				<td>
					<div class="trh">
						<div class="date">
							<input type="date"
								   @bind:event="onchange"
								   @bind:get="@rr.RSD"
								   @bind:set="CheckRSD" />
						</div>
						<div class="time">
							<input type="time"
								   @bind:event="onchange"
								   @bind:get="@rr.RSD"
								   @bind:set="CheckRSD" />
						</div>
					</div>
				</td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">planlanan süre</td>
			</tr>
			<tr>
				<td>saat</td>
				<td><input type="number" min="1" @bind="rr.RPH" /></td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">planlanandan ne kadar önce Talep eklensin</td>
			</tr>
			<tr>
				<td>saat</td>
				<td><input type="number" min="1" @bind="rr.ISH" /></td>
			</tr>

			<tr>
				<td>konu</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="TTL"
							   @bind="rr.TskAd"
							   @bind:event="onchange"
							   @bind:after="CheckTsk" />
					</div>
				</td>
			</tr>
			<tr>
				<td>bölüm</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="SSL"
							   @bind="rr.SrvAd"
							   @bind:event="onchange"
							   @bind:after="CheckSrv" />
					</div>
				</td>
			</tr>
			<tr>
				<td>gönderilen</td>
				<td>
					<div>
						<input type="text"
							   maxlength="30"
							   size="30"
							   list="SAL"
							   @bind="rr.ActAd"
							   @bind:event="onchange"
							   @bind:after="CheckAct" />
					</div>
				</td>
			</tr>

			<tr>
				<td colspan="2" class="lbl-top">açıklama</td>
			</tr>
			<tr>
				<td colspan="2">
					<InputTextArea @bind-Value="rr.Inf"
								   rows="2"
								   style="min-width:100%; resize: both;" />
				</td>
			</tr>
			<tr>
				<td>sil</td>
				<td><input type="checkbox" @bind="rr.isDel" style="width:auto" /></td>
			</tr>
		</tbody>
	</table>

	<datalist id="TTL">
		@foreach (var r in ttd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SSL">
		@foreach (var r in ssd!)
		{
			<option value="@r.Key" />
		}
	</datalist>
	<datalist id="SAL">
		@foreach (var r in sad!)
		{
			<option value="@r.Key" />
		}
	</datalist>

}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int RRId { get; set; }
	private RR? rr = default, orr = default;
	private Dictionary<string, int>? ttd, ssd, sad;
	private bool isOK;

	private void CheckTsk()
	{
		if (ttd!.TryGetValue(rr.TskAd, out var nid))
		{
			rr.TskId = nid;
		}
		else
			rr.TskAd = orr.TskAd;
	}
	private void CheckSrv()
	{
		if (ssd!.TryGetValue(rr.SrvAd, out var nid))
		{
			rr.SrvId = nid;
			SrvActLU(nid);

			if (!String.IsNullOrEmpty(rr.ActAd) && sad!.TryGetValue(rr.ActAd, out var nid2))
			{
				rr.ActId = nid2;
			}
			else
			{
				rr.ActId = 0;
				rr.ActAd = "";
			}
			//CheckAct();
		}
		else
			rr.SrvAd = orr.SrvAd;
	}
	private void CheckAct()
	{
		if (sad!.TryGetValue(rr.ActAd, out var nid))
		{
			rr.ActId = nid;
		}
		else
			rr.ActAd = orr.ActAd;
	}

	private void CheckRSD(DateTime? val)
	{
		DateTime min = DateTime.Now.AddHours(1);

		// Time part
		if (val.HasValue && rr!.RSD.HasValue && val.Value.TimeOfDay != TimeSpan.Zero)
			val = rr.RSD!.Value.Date.Add(val.Value.TimeOfDay);

		if (val == null || val < min)
			rr!.RSD = min;
		else
			rr!.RSD = val;
	}

	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			_ = conn.Execute("RR_MDF",
					new
					{
						p1 = my.Id,
						p2 = my.FrmId,
						p3 = RRId,
						p4 = rr.Psf,
						p5 = rr.Prd,
						p6 = rr!.Ad,
						p7 = rr.ISH,
						p8 = rr.RSD,
						p9 = rr.RPH,
						pa = rr.TskId,
						pb = rr.SrvId,
						pc = rr.ActId,
						pd = rr.Inf,
						pe = rr.Del,
					},
					commandType: CommandType.StoredProcedure);

			await ModalIns.CloseAsync(ModalResult.Ok());
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalWarning>(hata);
		}
	}

	protected override void OnInitialized()
	{
		//Modal.Show<ModalConfirm>("deneme");

		using var conn = db.GetConnection();

		try
		{
			if (RRId == 0)
			{
				rr = new();
			}
			else
			{
				rr = conn.QuerySingle<RR>("RR_SEL",
						new { UsrId = my.Id, RRId = RRId },
						commandType: CommandType.StoredProcedure);
			}

			ttd = conn.Query<TT>("TT_LU", new { FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
			ssd = conn.Query<SS>("SS_LU", new { UsrId = my.Id, FFId = my.FrmId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
			//Srv Actors
			SrvActLU(rr.SrvId);
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}

	private void SrvActLU(int SSId)
	{
		if (SSId > 0)
		{
			using var conn = db.GetConnection();
			sad = conn.Query<UU>("SA_LU", new { SSId = rr.SrvId }, commandType: CommandType.StoredProcedure).ToDictionary(k => k.Ad, e => e.Id);
		}
		else
			sad = new();
	}

	private string Idf()
	{
		return RRId == 0 ? "yeni" : RRId.ToString("### ### ###");
	}

	public sealed class RR
	{
		public int RRId;
		public string? Ad;
		public int Psf;
		public bool isPsf
		{
			get => Psf == 1;
			set
			{
				Psf = value ? 1 : 0;
			}
		}
		public int UUId;
		public int Prd = 1; // Yıllık
		public int TskId;
		public string? TskAd;
		public int SrvId;
		public string? SrvAd;
		public int ActId;
		public string? ActAd;
		public int ISH = 1;     // RSDden Kaç saat önce Talep yaratılacak
		public int RPH = 1;     // Planlanan süre
		public DateTime? RSD = DateTime.Now.AddHours(1);
		public string? Inf;

		public int Del;
		public bool isDel
		{
			get => Del == 1;
			set
			{
				Del = value ? 1 : 0;
			}
		}

		public RR ShallowCopy()
		{
			return (RR)this.MemberwiseClone();
		}
	}

	public sealed class TT
	{
		public int Id;
		public string Ad;
	}
	public sealed class SS
	{
		public int Id;
		public string Ad;
	}
	public sealed class UU
	{
		public int Id;
		public string Ad;
	}

}
