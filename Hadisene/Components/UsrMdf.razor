@inject AppState my
@inject IDbCon db
@inject IModalService Modal

@if (rec != null && us != null)
{
	<table style="min-width:360px;">
		<caption>
			<button @onclick="Kaydet">
				<span class="material-symbols-outlined">check</span>Kullanıcı Kaydet
			</button>
		</caption>
		<tbody>
			<tr>
				<th>Id#</th>
				<th>@Idf()</th>
			</tr>
			<tr>
				<td>Ad</td>
				<td><input type="text" maxlength="30" @bind="rec!.Ad" /></td>
			</tr>
			<tr>
				<td>Yetkisi</td>
				<td>
					<select @bind="rec!.Ytk" style="width:100%;">
						@if (rec.Ytk < 9)
						{
							<option value="1">[A] Admin</option>
							<option value="3">[D] Denetci</option>
							<option value="4">[K] Kullanıcı</option>
							<option value="8">[P] Pasif</option>
							<option value="9">[∞] Ayrıldı</option>
						}
						else
						{
							<option value="9">[∞] Ayrıldı</option>
						}
					</select>
				</td>

			</tr>
			<tr>
				<td>Tel</td>
				<td><input type="text" maxlength="20" @bind="rec!.Tel" /></td>
			</tr>
			<tr>
				<td>Mail</td>
				<td><input type="text" maxlength="50" @bind="rec!.Mail" /></td>
			</tr>
			<tr>
				<td>Pwd</td>
				<td><input type="text" maxlength="20" @bind="rec!.Pwd" /></td>
			</tr>

			<tr>
				<td colspan="2" style="padding:0;">
					<div style="max-height:8lh;overflow:auto">
						<table>
							<tr style="font-size:.6rem;position:sticky;top:0;background-color:aliceblue;">
								<th></th>
								<th>Servis</th>
								<th>-</th>
								<th style="padding:2px 0">Sorumlu</th>
								<th style="padding:2px 0">Denetci</th>
							</tr>
							@foreach (var r in us)
							{
								<tr>
									<td class="ta-c"><input type="checkbox" @bind="r.isMbr" /></td>
									<td>@r.SSAd</td>
									<InputRadioGroup @bind-Value="r.Rol" Name="@r.SSId.ToString()">
										<td class="ta-c"><InputRadio Value="0" disabled="@(!r.isMbr)" /></td>
										<td class="ta-c"><InputRadio Value="2" disabled="@(!r.isMbr)" /></td>
										<td class="ta-c"><InputRadio Value="3" disabled="@(!r.isMbr)" /></td>
									</InputRadioGroup>
								</tr>
							}
						</table>
					</div>
				</td>
			</tr>

		</tbody>
	</table>
}

@code {
	[CascadingParameter] BlazoredModalInstance ModalIns { get; set; } = default!;
	[Parameter] public int UUId { get; set; }
	private UU? rec;
	private List<US>? us;

	public async Task Kaydet()
	{
		try
		{
			using var conn = db.GetConnection();
			var newId = conn.ExecuteScalar<int>("UU_MDF",
					new
					{
						p1 = my.Id,
						p2 = my.FrmId,
						p3 = UUId,
						p4 = rec.Ytk,
						p5 = rec.Ad,
						p6 = rec.Tel,
						p7 = rec.Mail,
						p8 = rec.Pwd,
					},
					commandType: CommandType.StoredProcedure);

			foreach (var r in us)
			{
				_ = conn.Execute("US_MDF",
					new
					{
						p1 = newId,
						p2 = my.FrmId,
						p3 = r.SSId,
						p4 = r.SUId,
						p5 = r.Mbr,
						p6 = r.Rol,
					},
					commandType: CommandType.StoredProcedure);
			}
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalWarning>(hata);
		}

		await ModalIns.CloseAsync(ModalResult.Ok());
	}

	protected override void OnInitialized()
	{
		//Modal.Show<ModalConfirm>("deneme");
		try
		{
			using var conn = db.GetConnection();
			if (UUId == 0)
			{
				rec = new();
			}
			else
			{
				rec = conn.QuerySingle<UU>("select * from UU where UUId = @Id",
						new { Id = UUId },
						commandType: CommandType.StoredProcedure);
			}
			us = conn.Query<US>("US_QRY",
					new
					{
						p1 = UUId,
						p2 = my.FrmId
					},
					commandType: CommandType.StoredProcedure).ToList();

			us = us.OrderByDescending(x => x.Mbr).ThenBy(y => y.SSAd).ToList();
		}
		catch (Exception ex)
		{
			var hata = ex.Message.Split("\r\n")[1];
			Modal.Show<ModalConfirm>(hata);
		}
	}


	private string Idf()
	{
		return UUId == 0 ? "yeni" : UUId.ToString();
	}

	public sealed class UU
	{
		public int UUId;
		public int Ytk = 4;
		public string? Ad;
		public string? Tel;
		public string? Mail;
		public string? Pwd;
	}
	public sealed class US
	{
		public int SUId;
		public int SSId;
		public string? SSAd;
		public int Rol;
		public int Mbr;
		public bool isMbr
		{
			get => Mbr == 1;
			set
			{
				Mbr = value ? 1 : 0;
			}
		}
	}
}
